{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7aa915eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import f1_score\n",
    "import pickle as p\n",
    "import numpy as np\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b1efa75d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dell\\AppData\\Local\\Temp\\ipykernel_7336\\3103726082.py:12: DtypeWarning: Columns (2,3,4,5,6,8) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df = pd.read_csv(f)\n"
     ]
    }
   ],
   "source": [
    "import zipfile\n",
    "import pandas as pd\n",
    "\n",
    "# Open the zip file\n",
    "with zipfile.ZipFile(\"CAP+Project+2+-+corona_tested_006.zip\") as z:\n",
    "    # Get the information of all files \n",
    "    for info in z.infolist():\n",
    "        # Extract the file\n",
    "        with z.open(info) as f:\n",
    "            # If it's a CSV file, read it into a Pandas DataFrame\n",
    "            if info.filename.endswith('.csv'):\n",
    "                df = pd.read_csv(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d5944ae3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Ind_ID   Test_date Cough_symptoms  Fever Sore_throat Shortness_of_breath  \\\n",
      "0       1  11-03-2020           True  False        True               False   \n",
      "1       2  11-03-2020          False   True       False               False   \n",
      "2       3  11-03-2020          False   True       False               False   \n",
      "3       4  11-03-2020           True  False       False               False   \n",
      "4       5  11-03-2020           True  False       False               False   \n",
      "\n",
      "  Headache    Corona Age_60_above  Sex           Known_contact  \n",
      "0    False  negative          NaN  NaN                  Abroad  \n",
      "1    False  positive          NaN  NaN                  Abroad  \n",
      "2    False  positive          NaN  NaN                  Abroad  \n",
      "3    False  negative          NaN  NaN                  Abroad  \n",
      "4    False  negative          NaN  NaN  Contact with confirmed  \n"
     ]
    }
   ],
   "source": [
    " print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e468095e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(278848, 11)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "be51dcd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 278848 entries, 0 to 278847\n",
      "Data columns (total 11 columns):\n",
      " #   Column               Non-Null Count   Dtype \n",
      "---  ------               --------------   ----- \n",
      " 0   Ind_ID               278848 non-null  int64 \n",
      " 1   Test_date            278848 non-null  object\n",
      " 2   Cough_symptoms       278596 non-null  object\n",
      " 3   Fever                278596 non-null  object\n",
      " 4   Sore_throat          278847 non-null  object\n",
      " 5   Shortness_of_breath  278847 non-null  object\n",
      " 6   Headache             278847 non-null  object\n",
      " 7   Corona               278848 non-null  object\n",
      " 8   Age_60_above         151528 non-null  object\n",
      " 9   Sex                  259285 non-null  object\n",
      " 10  Known_contact        278848 non-null  object\n",
      "dtypes: int64(1), object(10)\n",
      "memory usage: 23.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ee04ddc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ind_ID                      0\n",
       "Test_date                   0\n",
       "Cough_symptoms            252\n",
       "Fever                     252\n",
       "Sore_throat                 1\n",
       "Shortness_of_breath         1\n",
       "Headache                    1\n",
       "Corona                      0\n",
       "Age_60_above           127320\n",
       "Sex                     19563\n",
       "Known_contact               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "42fc3d56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ind_ID</th>\n",
       "      <th>Test_date</th>\n",
       "      <th>Cough_symptoms</th>\n",
       "      <th>Fever</th>\n",
       "      <th>Sore_throat</th>\n",
       "      <th>Shortness_of_breath</th>\n",
       "      <th>Headache</th>\n",
       "      <th>Corona</th>\n",
       "      <th>Age_60_above</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Known_contact</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Ind_ID, Test_date, Cough_symptoms, Fever, Sore_throat, Shortness_of_breath, Headache, Corona, Age_60_above, Sex, Known_contact]\n",
       "Index: []"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"Age_60_above\"]==\"?\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7b0f9ef7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Age_60_above\"].replace(\"?\",df[\"Age_60_above\"].mode()[0],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ceb32834",
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Age_60_above\"]=df[\"Age_60_above\"].astype(\"string\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "489a7cc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 278848 entries, 0 to 278847\n",
      "Data columns (total 11 columns):\n",
      " #   Column               Non-Null Count   Dtype \n",
      "---  ------               --------------   ----- \n",
      " 0   Ind_ID               278848 non-null  int64 \n",
      " 1   Test_date            278848 non-null  object\n",
      " 2   Cough_symptoms       278596 non-null  object\n",
      " 3   Fever                278596 non-null  object\n",
      " 4   Sore_throat          278847 non-null  object\n",
      " 5   Shortness_of_breath  278847 non-null  object\n",
      " 6   Headache             278847 non-null  object\n",
      " 7   Corona               278848 non-null  object\n",
      " 8   Age_60_above         151528 non-null  string\n",
      " 9   Sex                  259285 non-null  object\n",
      " 10  Known_contact        278848 non-null  object\n",
      "dtypes: int64(1), object(9), string(1)\n",
      "memory usage: 23.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9f2fb67d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ind_ID</th>\n",
       "      <th>Test_date</th>\n",
       "      <th>Cough_symptoms</th>\n",
       "      <th>Fever</th>\n",
       "      <th>Sore_throat</th>\n",
       "      <th>Shortness_of_breath</th>\n",
       "      <th>Headache</th>\n",
       "      <th>Corona</th>\n",
       "      <th>Age_60_above</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Known_contact</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>11-03-2020</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>negative</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>11-03-2020</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>positive</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>11-03-2020</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>positive</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ind_ID   Test_date Cough_symptoms  Fever Sore_throat Shortness_of_breath  \\\n",
       "0       1  11-03-2020           True  False        True               False   \n",
       "1       2  11-03-2020          False   True       False               False   \n",
       "2       3  11-03-2020          False   True       False               False   \n",
       "\n",
       "  Headache    Corona Age_60_above  Sex Known_contact  \n",
       "0    False  negative         <NA>  NaN        Abroad  \n",
       "1    False  positive         <NA>  NaN        Abroad  \n",
       "2    False  positive         <NA>  NaN        Abroad  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3be84603",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The unique values in Cough_symptoms is: \n",
      "[True False nan]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "The unique values in Fever is: \n",
      "[False True nan]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "The unique values in Sore_throat is: \n",
      "[True False nan]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "The unique values in Shortness_of_breath is: \n",
      "[False True nan]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "The unique values in Headache is: \n",
      "[False True nan]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "The unique values in Corona is: \n",
      "['negative' 'positive' 'other']\n",
      "----------------------------------------------------------------------------------------------------\n",
      "The unique values in Sex is: \n",
      "[nan 'male' 'female']\n",
      "----------------------------------------------------------------------------------------------------\n",
      "The unique values in Known_contact is: \n",
      "['Abroad' 'Contact with confirmed' 'Other']\n",
      "----------------------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "for i in ['Cough_symptoms', 'Fever', 'Sore_throat',\n",
    "       'Shortness_of_breath', 'Headache', 'Corona', 'Sex',\n",
    "       'Known_contact']:\n",
    "    print(\"The unique values in {} is: \\n{}\".format(i,df[i].unique()))\n",
    "    print(\"-\"*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4461e8b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column 'Age_60_above' does not exist in the DataFrame.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming df is your DataFrame containing the dataset\n",
    "# Check if 'Age_60_above' exists in the DataFrame before attempting to drop it\n",
    "if 'Age_60_above' in df.columns:\n",
    "    # Drop the 'Age_60_above' column\n",
    "    df.drop(columns=['Age_60_above'], inplace=True)\n",
    "    print(\"Column 'Age_60_above' has been successfully dropped.\")\n",
    "else:\n",
    "    print(\"Column 'Age_60_above' does not exist in the DataFrame.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ca5bf8ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cough_symptoms</th>\n",
       "      <th>Fever</th>\n",
       "      <th>Sore_throat</th>\n",
       "      <th>Shortness_of_breath</th>\n",
       "      <th>Headache</th>\n",
       "      <th>Corona</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Known_contact</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Cough_symptoms  Fever Sore_throat Shortness_of_breath Headache    Corona  \\\n",
       "0           True  False        True               False    False  negative   \n",
       "1          False   True       False               False    False  positive   \n",
       "2          False   True       False               False    False  positive   \n",
       "\n",
       "   Sex Known_contact  \n",
       "0  NaN        Abroad  \n",
       "1  NaN        Abroad  \n",
       "2  NaN        Abroad  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "4ac2ad89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-03-11 00:00:00\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "date_string = \"11-03-2020\"\n",
    "date_format = \"%d-%m-%Y\"\n",
    "\n",
    "try:\n",
    "    parsed_date = datetime.strptime(date_string, date_format)\n",
    "    print(parsed_date)\n",
    "except ValueError:\n",
    "    print(\"Date string doesn't match the specified format.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22fd9ec3",
   "metadata": {},
   "outputs": [],
   "source": [
    "  df['Stamp'] = pd.Series(stamp) df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bb9514f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('Test_date',axis=1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "80adb2e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cough_symptoms         0.090372\n",
       "Fever                  0.090372\n",
       "Sore_throat            0.000359\n",
       "Shortness_of_breath    0.000359\n",
       "Headache               0.000359\n",
       "Corona                 0.000000\n",
       "Sex                    7.015650\n",
       "Known_contact          0.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df.isnull().sum()/df.shape[0])*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "b6f8f58f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 8 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "r=3\n",
    "c=3\n",
    "it=1\n",
    "for i in df.columns:\n",
    "    plt.subplot(r,c,it)\n",
    "    sns.countplot(x=i,data=df)\n",
    "    it+=1\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "853f2349",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ind_ID</th>\n",
       "      <th>Test_date</th>\n",
       "      <th>Cough_symptoms</th>\n",
       "      <th>Fever</th>\n",
       "      <th>Sore_throat</th>\n",
       "      <th>Shortness_of_breath</th>\n",
       "      <th>Headache</th>\n",
       "      <th>Corona</th>\n",
       "      <th>Age_60_above</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Known_contact</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>11-03-2020</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>11-03-2020</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>11-03-2020</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>11-03-2020</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Abroad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>11-03-2020</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>negative</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Contact with confirmed</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ind_ID   Test_date Cough_symptoms  Fever Sore_throat Shortness_of_breath  \\\n",
       "0       1  11-03-2020           True  False        True               False   \n",
       "1       2  11-03-2020          False   True       False               False   \n",
       "2       3  11-03-2020          False   True       False               False   \n",
       "3       4  11-03-2020           True  False       False               False   \n",
       "4       5  11-03-2020           True  False       False               False   \n",
       "\n",
       "  Headache    Corona Age_60_above  Sex           Known_contact  \n",
       "0    False  negative          NaN  NaN                  Abroad  \n",
       "1    False  positive          NaN  NaN                  Abroad  \n",
       "2    False  positive          NaN  NaN                  Abroad  \n",
       "3    False  negative          NaN  NaN                  Abroad  \n",
       "4    False  negative          NaN  NaN  Contact with confirmed  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "96b07529",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ind_ID                  0.000000\n",
       "Test_date               0.000000\n",
       "Cough_symptoms          0.090372\n",
       "Fever                   0.090372\n",
       "Sore_throat             0.000359\n",
       "Shortness_of_breath     0.000359\n",
       "Headache                0.000359\n",
       "Corona                  0.000000\n",
       "Age_60_above           45.659284\n",
       "Sex                     7.015650\n",
       "Known_contact           0.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df.isnull().sum()/df.shape[0])*100\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "cd6dd137",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Corona\n",
       "negative    260227\n",
       "positive     14729\n",
       "other         3892\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Corona'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "47c63617",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Known_contact\n",
       "Other                     242741\n",
       "Abroad                     25468\n",
       "Contact with confirmed     10639\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Known_contact'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdce1d8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA preproocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a31929e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import f1_score\n",
    "import pickle as p\n",
    "import numpy as np\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f6c707f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dell\\AppData\\Local\\Temp\\ipykernel_4980\\3103726082.py:12: DtypeWarning: Columns (2,3,4,5,6,8) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df = pd.read_csv(f)\n"
     ]
    }
   ],
   "source": [
    "import zipfile\n",
    "import pandas as pd\n",
    "\n",
    "# Open the zip file\n",
    "with zipfile.ZipFile(\"CAP+Project+2+-+corona_tested_006.zip\") as z:\n",
    "    # Get the information of all files \n",
    "    for info in z.infolist():\n",
    "        # Extract the file\n",
    "        with z.open(info) as f:\n",
    "            # If it's a CSV file, read it into a Pandas DataFrame\n",
    "            if info.filename.endswith('.csv'):\n",
    "                df = pd.read_csv(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a622fc9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Ind_ID   Test_date Cough_symptoms  Fever Sore_throat Shortness_of_breath  \\\n",
      "0       1  11-03-2020           True  False        True               False   \n",
      "1       2  11-03-2020          False   True       False               False   \n",
      "2       3  11-03-2020          False   True       False               False   \n",
      "3       4  11-03-2020           True  False       False               False   \n",
      "4       5  11-03-2020           True  False       False               False   \n",
      "\n",
      "  Headache    Corona Age_60_above  Sex           Known_contact  \n",
      "0    False  negative          NaN  NaN                  Abroad  \n",
      "1    False  positive          NaN  NaN                  Abroad  \n",
      "2    False  positive          NaN  NaN                  Abroad  \n",
      "3    False  negative          NaN  NaN                  Abroad  \n",
      "4    False  negative          NaN  NaN  Contact with confirmed  \n"
     ]
    }
   ],
   "source": [
    " print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "74115069",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to convert the data\n",
    "\n",
    "def convert(x):\n",
    "    if x=='TRUE':\n",
    "        return 'true'\n",
    "    elif x==True:\n",
    "        return 'true'\n",
    "    elif x=='FALSE' or x==False:\n",
    "        return 'false'\n",
    "    else:\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "f987cb41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 278848 entries, 0 to 278847\n",
      "Data columns (total 11 columns):\n",
      " #   Column               Non-Null Count   Dtype \n",
      "---  ------               --------------   ----- \n",
      " 0   Ind_ID               278848 non-null  int64 \n",
      " 1   Test_date            278848 non-null  object\n",
      " 2   Cough_symptoms       278596 non-null  object\n",
      " 3   Fever                278596 non-null  object\n",
      " 4   Sore_throat          278847 non-null  object\n",
      " 5   Shortness_of_breath  278847 non-null  object\n",
      " 6   Headache             278847 non-null  object\n",
      " 7   Corona               278848 non-null  object\n",
      " 8   Age_60_above         151528 non-null  object\n",
      " 9   Sex                  259285 non-null  object\n",
      " 10  Known_contact        278848 non-null  object\n",
      "dtypes: int64(1), object(10)\n",
      "memory usage: 23.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "126b6111",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replacing the none values with Nan values\n",
    "\n",
    "df.replace({'None': np.nan}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "807ec61b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ind_ID                      0\n",
       "Test_date                   0\n",
       "Cough_symptoms            252\n",
       "Fever                     252\n",
       "Sore_throat                 1\n",
       "Shortness_of_breath         1\n",
       "Headache                    1\n",
       "Corona                      0\n",
       "Age_60_above           127320\n",
       "Sex                     19563\n",
       "Known_contact               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "9aa09fe2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping the nan values from columns\n",
    "\n",
    "df.dropna(subset=['Cough_symptoms','Fever','Sore_throat','Shortness_of_breath','Headache'],axis=0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "9cf020a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dropping the age_60_above column\n",
    "\n",
    "df.drop('Age_60_above',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "183014fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # replacing the none values with Nan values\n",
    "\n",
    "df.replace({'other': np.nan},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "965da277",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping the nan values from columns\n",
    "\n",
    "df.dropna(subset=['Corona'],axis=0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "bc48a240",
   "metadata": {},
   "outputs": [],
   "source": [
    "# converting the datatype as categorical\n",
    "\n",
    "for i in df.columns:\n",
    "    if i=='Ind_ID' or i == 'Test_date':\n",
    "        pass\n",
    "    else:\n",
    "        df[i] = df[i].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "c4d9a4dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 274702 entries, 0 to 278847\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count   Dtype   \n",
      "---  ------               --------------   -----   \n",
      " 0   Ind_ID               274702 non-null  int64   \n",
      " 1   Test_date            274702 non-null  object  \n",
      " 2   Cough_symptoms       274702 non-null  category\n",
      " 3   Fever                274702 non-null  category\n",
      " 4   Sore_throat          274702 non-null  category\n",
      " 5   Shortness_of_breath  274702 non-null  category\n",
      " 6   Headache             274702 non-null  category\n",
      " 7   Corona               274702 non-null  category\n",
      " 8   Sex                  255668 non-null  category\n",
      " 9   Known_contact        274702 non-null  category\n",
      "dtypes: category(8), int64(1), object(1)\n",
      "memory usage: 8.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5912af8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "EXPLORATORY DATA ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4a62c741",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(278848, 11)\n",
      "Ind_ID                  int64\n",
      "Test_date              object\n",
      "Cough_symptoms         object\n",
      "Fever                  object\n",
      "Sore_throat            object\n",
      "Shortness_of_breath    object\n",
      "Headache               object\n",
      "Corona                 object\n",
      "Age_60_above           object\n",
      "Sex                    object\n",
      "Known_contact          object\n",
      "dtype: object\n",
      "   Ind_ID   Test_date Cough_symptoms  Fever Sore_throat Shortness_of_breath  \\\n",
      "0       1  11-03-2020           True  False        True               False   \n",
      "1       2  11-03-2020          False   True       False               False   \n",
      "2       3  11-03-2020          False   True       False               False   \n",
      "3       4  11-03-2020           True  False       False               False   \n",
      "4       5  11-03-2020           True  False       False               False   \n",
      "\n",
      "  Headache    Corona Age_60_above  Sex           Known_contact  \n",
      "0    False  negative          NaN  NaN                  Abroad  \n",
      "1    False  positive          NaN  NaN                  Abroad  \n",
      "2    False  positive          NaN  NaN                  Abroad  \n",
      "3    False  negative          NaN  NaN                  Abroad  \n",
      "4    False  negative          NaN  NaN  Contact with confirmed  \n",
      "        Ind_ID   Test_date Cough_symptoms  Fever Sore_throat  \\\n",
      "278843  278844  30-04-2020          False  False       False   \n",
      "278844  278845  30-04-2020          False  False       False   \n",
      "278845  278846  30-04-2020          False  False       False   \n",
      "278846  278847  30-04-2020          False  False       False   \n",
      "278847  278848  30-04-2020          False  False       False   \n",
      "\n",
      "       Shortness_of_breath Headache    Corona Age_60_above     Sex  \\\n",
      "278843               False    False  positive          NaN    male   \n",
      "278844               False    False  negative          NaN  female   \n",
      "278845               False    False  negative          NaN    male   \n",
      "278846               False    False  negative          NaN    male   \n",
      "278847               False    False  negative          NaN  female   \n",
      "\n",
      "       Known_contact  \n",
      "278843         Other  \n",
      "278844         Other  \n",
      "278845         Other  \n",
      "278846         Other  \n",
      "278847         Other  \n"
     ]
    }
   ],
   "source": [
    "# Basic info about data\n",
    "print(df.shape)\n",
    "print(df.dtypes)\n",
    "print(df.head())\n",
    "print(df.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "9ecde8fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "# Bar plot for categorical variables\n",
    "for col in df.columns:\n",
    "    if df[col].dtype == 'object':\n",
    "        df[col].value_counts().plot(kind='bar')\n",
    "        plt.title(col)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "d68aa86f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cols = ['Cough_symptoms', 'Fever', 'Sore_throat']\n",
    "\n",
    "# Set up the figure and axes\n",
    "\n",
    "fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(18, 6))\n",
    "\n",
    "# Plot univariate distributions for each column\n",
    "for i, col in enumerate(cols):\n",
    "    sns.countplot(data=df , x=col, ax=axes[i])\n",
    "    axes[i].set_title(f'Distribution of {col}' , fontsize=18 )\n",
    "    axes[i].set_ylabel('Count')\n",
    "    axes[i].tick_params(axis='x')\n",
    "    axes[i].grid(True)\n",
    "\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "7f11e87e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABv4AAAJOCAYAAAB/dnBOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACYWUlEQVR4nOzdeVyVZf7/8TegxqLBURy00lzwaLkk6oCoaWnUqLmMoliMmYUWMJV+BysTR0fDZWzKodLKdJjKlgFj0rKyZpwkciEjbUPBUklzAUFZRFnO7w9/5x6PgHIQxLl5PR+P83hw7uu+7vs693Y+XJ/7XLeLzWazCQAAAAAAAAAAAMD/NNeGbgAAAAAAAAAAAACAy0fiDwAAAAAAAAAAADABEn8AAAAAAAAAAACACZD4AwAAAAAAAAAAAEyAxB8AAAAAAAAAAABgAiT+AAAAAAAAAAAAABMg8QcAAAAAAAAAAACYAIk/AAAAAAAAAAAAwARI/AEAAAAAAAAAAAAmQOIPTvv555/VtWvXKl8333yzAgICdOedd2rGjBn697//Xe1ytm/fbtQrKyu77HbZbDbt27fP6XqTJ09W165d9dxzzxnTzv+MBw4cuOy21dTp06f1888/O0x799131bVrVw0ePPiKteNK+uyzzxQWFqaAgAAFBATo7rvvls1mq1Hd3NxcvfDCC5o4caL69++vHj16aODAgQoLC1N8fLyOHj1aZb2rdZvW9hjGpZWWluq5557T0KFD1aNHDwUHB+v555+v9fKef/55de3aVffcc08dtrLh5Ofn6/jx4w7TzPYZATQcYsf6Q+xYs9jRvs+efPLJSy7//H25ffv2ump2nWuoY+589vV/8cUXDbJ+AEDNEIvVH2Ix5/rxJKm8vFwff/yxZsyYoaFDh6pnz57q1auX7rjjDs2aNeuqjr+A/yUk/nBZrFar+vTpY7x69uyptm3b6pdfftGHH36oyMhIPfjggyooKKjXduzevVsTJ07UypUr63U99WnDhg266667tHXr1oZuyhWze/duPfzww/r666/VrFkzderUSe3bt5eLi8sl6/773//WXXfdpeeff17ff/+9fH191b17d1177bX65ptv9OKLL+quu+7Su+++ewU+yeUzwzF8NVuyZIleeuklHTp0SNdff738/Px0/fXXN3SzrgoJCQm68847lZmZ2dBNAdAIEDvWHWJH52JHAABALFaXiMWcj8V+/PFHjRs3To8++qg+/PBD5eXlqUOHDrr++ut19OhRrV+/Xvfdd58ee+wxFRcX1/OnAcytSUM3AP/bYmNjFRQUVGn62bNn9d5772nx4sX6/PPPFRUVpdWrV6tZs2bGPL169dLGjRslSU2aXN6h+Oabb2r37t268cYbna67dOlSnT59WhaL5bLacLmee+65Kn+hFhISoltuuUVNmzZtgFbVr48//lgVFRW64YYb9MEHH8jd3b1G9fbt26cZM2bozJkz+v3vf68HHnhAXl5eRvmJEyf0l7/8RUlJSZozZ47atGmjAQMG1NfHqBOXcwzj0j788ENJ0vTp0/WHP/yhgVtzdVm8eHFDNwFAI0LsWHeIHWseOwIAgHOIxeoOsZhzsVhaWpqmT5+u4uJi9ejRQ48++qiGDBlilJeUlOjtt9/WX//6V3300UfKy8vTmjVrLvtYAxorfvGHetGsWTNNmDBBL7/8stzc3LRjxw79/e9/d5jHw8NDnTt3VufOnRuoledcd9116ty5s1q2bNmg7ahOixYt1LlzZ7Vv376hm1Ln8vLyJEm33HKLU8HCmjVrdObMGY0YMUKPPPKIQ9JPklq2bKmFCxcqODhYFRUVeuGFF+q03fjfYz/WAgMDG7glAICqEDvWHWJHAADgLGKxukMsVnW9P/zhDyouLtagQYP05ptvOiT9JMnd3V3333+/XnzxRbm4uGj79u1644036rT9QGNC4g/16te//rXCwsIkSa+++qpKSkoauEW4mlRUVEiSwx1kNfHNN99IOhdoVMfV1VWhoaHG/PZ1oXGq7bEGALiyiB1xMXyfAwBQv4jFcDG1jcWWL1+uo0ePytPTU8uWLdM111xT7bwDBgzQ8OHDJUl/+9vf6M8DaonEH+qdPWDIz8/Xl19+aUy/2EOBd+3apZkzZ+quu+5Sr1699Otf/1oTJ07UK6+8osLCwkrLSE5OlnRufO2uXbtq8uTJkv77cN+BAwfq6NGjmj59unr16qXAwEBjuL+qHgp8voqKCr3++uu6++671bNnTw0YMECPPfaYkXw6X00edGwvtz+s9vnnn1fXrl116NAhSeeGXejatauef/55SZd+KPDWrVv1yCOPaNCgQerRo4f69++viIgIbdq0qcr5hw4dqq5du2rfvn3asWOHpk+frqCgIPXs2VPDhw9XfHy8ioqKqqx7MeXl5UpMTNTkyZP161//Wj169NBtt92mWbNm6bvvvnOY1/6Z7fstOTnZ2C4XPhS5KvbhEv7zn/9c9AHCQ4cO1XvvvadPPvlErq5VX+6Ki4v1wgsvaMSIEerVq5eCgoL04IMPKjU1tdrlHj16VEuXLtWIESN0yy23KCAgQGPGjNELL7ygU6dOVZrf/nmfeeYZffrpp7rrrrvUo0cPDR06VB988EGNj2GbzabExERNmDDBeIhyWFiY1q1bV+12KCws1IsvvqixY8cqICBAvXv31qhRoxQfH19lW+2f7+mnn9bo0aPVp08fBQQEaMSIEXr66aer3T8ffPCBHnzwQd1+++3q0aOHgoOD9eCDD2r9+vV1HqQ5s/3tx7vdfffd57B968KxY8f01FNPaeDAgcZ59Nxzz1W5fZ988kl17dpVb731lt555x3ddttt6tmzp+68806HB1jXZr9J0o4dOzRr1izdcccd6t27t3r06KFbb71VjzzySKXnDtjbYjd16lR17dq1yudinjhxQkuWLFFISIh69OihgQMH6tFHH63yOggAl4vY0RGx4+XHjnXp7Nmz+vvf/66wsDD17dtXvXr10l133aXFixfr2LFj1db74YcfNHfuXA0fPlx9+vRRjx49NGDAAE2bNk0fffRRtfW+//57/eEPf9CQIUPUq1cvjRo1SmvXrr1oDCw5FxOc7+DBg1q8eLF+85vf6JZbblGfPn00adIk/eMf/7hoTLd582bdf//96tevnxG3vPzyyzp79myV85eXlys5OVn33XefAgMDjdh47ty52r9//0U/GwCgfhGLOSIWu7xY7MyZM1q/fr0kKTQ0tEa/1IyOjlZ8fLzWrVtXqT/PmXZLNTum7K7kvjl27Jiee+45hYaGKjAwUN27d1dgYKAmTZqkNWvWkHTHZWOQXNS7bt26qXnz5iosLNSOHTs0aNCgi86/adMmzZw5U2VlZbJYLPL391dRUZF2796tXbt2af369Xr77bfVvHlztWjRQn369NGBAweUm5urli1bqkOHDrJarQ7LPHv2rB588EHt379fXbp00eHDh3X99dfXqP1z585VWlqafHx8ZLVadeDAAX300UfatGmTnn76aY0fP77W20aS2rZtqz59+ujbb7/V2bNndeONN6pVq1Zq27btJesuXLjQ+Nm7j4+PunXrpqNHjyolJUUpKSkaPny4li1bVuW44omJiUpISFCzZs3UoUMHnTx5Uj/++KNefPFFffHFF1q7dq3c3Nxq9BkKCwsVERGh9PR0SdL111+v9u3ba//+/Vq/fr3ef/99Pf7445o6darDZ7bvt1atWhnjul/srh+7QYMG6dtvv9XWrVs1efJkTZ48Wbfeeqs8PT0d5vP09FS3bt2qXU5JSYnCwsK0d+9etW3bVh07dtT+/fv1+eefKzU1VYsXL9Zvf/tbhzr2IKCgoEBNmzaVv7+/ysrKtHfvXmVkZCgpKUkvv/yyQ0LFLi0tTWvWrJG3t7c6d+6sffv26YYbbqjRMWyz2fTEE0/ovffe07XXXquOHTsqOztbX3/9tb7++mv99NNPiomJcaizb98+TZs2TYcOHZKbm5vatWsnd3d3ZWVl6cUXX9Q///lPrVq1ymGYjoMHD2rSpEnKzc2Vp6enbrjhBknS/v379frrrys5OVmvv/66br75ZqPO4sWLlZCQIOncvu/atauOHTumzz//3Hj9+c9/vsgerTlnt3+PHj3k5+enr776StK5B5k3b9680vatrZycHIWGhuro0aPq0KGDWrVqpczMTL300kvasGGDXn/99SqvNevXr9dXX32lNm3aqEOHDvr555910003SardfpOkv/zlL3rllVcknRvutlOnTiosLNShQ4e0adMmbdq0SQsWLDD+ievQoYP69OlTadu0atXKYbnHjh3Tb3/7Wx05ckTt27dXx44d9dNPP+njjz/Wv//9b61atUrBwcF1sj0BQCJ2vBRiR+djx7py7NgxTZ8+XT/88INcXFx03XXXycfHR1lZWUpISNA///lPrVixQn379nWo9+abb2rhwoWqqKiQt7e3brzxRpWUlOjnn3/Wli1btGXLFj388MOaOXOmQ73169frqaeeUmlpqby9vdWlSxcdOnRICxYsuOjw5c7GBHaffPKJHn/8cRUXF+uaa66Rv7+/Tp06pfT0dKWnp2vHjh1atmyZXFxcHOqtWLFCaWlp8vT0VIcOHXTs2DHt3btXzz77rLZu3ao1a9Y4dNoVFRXp97//vb744gtJkp+fn2644Qbt379f//jHP7R+/XotW7ZMd955p/M7CQBw2YjFLo5YzLlYLD09XcXFxZKkgQMH1qh9/v7+8vf3v+x2n+9Sx9SV3Ddff/21pk2bplOnTumaa65R+/bt1aRJE/38889G3PWvf/1Lr732Wo33KVCJDXBSdna2zWq12qxWq23btm01qjNq1Cib1Wq1/eEPfzCmbdu2zVhOaWmpzWaz2crLy20DBw60Wa1W26pVq2xlZWXG/N9++62tf//+NqvVanv55Zcdlv/EE09UWv6FbQ0MDLRlZmbabDab7cyZM7aCggKbzWaz/e53v7NZrVbbs88+W2U9q9Vqe+6552xnz5612Ww2W0lJiW3+/Pk2q9Vq6969uy0rK+uin+lC1W2722+/3Wa1Wm3/+Mc/HKavW7fOZrVabbfeeqvD9NWrV9usVqvt5ptvtr3xxhu28vJyo2zjxo223r1726xWq23hwoVVrsdqtdqefPJJ26lTp2w2m81WUVFhe+ONN4yyTz75pMr2V+Whhx6yWa1W28CBAx0+15kzZ2zLly83lvnxxx871LPvtyeeeKLG67LZbLZTp07ZRowY4bCPunfvbps0aZLtmWeesX322We24uLiauvbt6n9uPjPf/5jlOXm5trCwsJsVqvVNmDAAFtFRYVR9vPPPxvb9eGHH7YdP37cKDt48KBR77bbbjO2q81ms8XHxxvri46Otp05c8ZY14Xb4mLH8E033WT7+9//bpwXJSUltpiYGOM4OH95RUVFtpCQEJvVarVFRkbajhw5YpQdO3bMNn36dJvVarXdeeedttOnTxtlM2bMsFmtVtsjjzxiKywsNKYfP37c+HwPPPCAMT0rK8tmtVptPXv2rHRMJycn27p162azWq229PT0avdHTdV2+9ts1Z93tXX+Pu3fv78tLS3NKPvxxx9tw4cPt1mtVtu9997rUM++n61Wq23BggXGvrTvu9ruN/u1p1u3brakpCSH68Evv/xiXOcGDBjgUHb+tklNTa32M95+++22Xbt2GWUHDx603XnnnTar1WoLDQ2t7WYE0EgQOxI7XuhKx472fVaTetUdrxUVFUascc8999j27dtnlJ06dco2e/Zsm9VqtQUFBdmOHTtmlP3000+27t2726xWq23FihXGcWGz2Wx5eXm2xx57zDg28vPzjbKDBw/aevbsabNarbbFixcb8WNZWZnt5Zdfdjje9u/fb9SrbUxw4MAB4xh44oknHGKpzz77zNarVy+b1Wq1vfPOO8b089uwZMkSW1FRkbGtXnrpJaPs/FjbZrPZ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+usVHBysQYMG6dZbb63xXXkXUxfbvz5c7Li3P/x73759lcqqux7Vdr9J5855V1dXffnll8rKylJ2drYOHjyoPXv26MCBA8Z85/8TVhPVHbfnd3ry0GkAdY3YsW4RO54zePBgLVmy5KLz/Pzzz1X+6s/+Hb1582ZjhIQL2W/C2r9/v2w2m0MH0DXXXKPdu3dr7969xnf03r17Hb7PbTabpHPfq7/88oskqUuXLlWuq1u3bnJxcTHqnM/ZmODMmTNGnFXd87GbN29ebVuqi1HtscL5cUJmZqYk6dtvv602eWmPv4uKinT06FFdd911Vc4HAKg/xGJ1qzHHYue3Oy8vz6HPzRl10e6qjqmG2jfu7u7av3+/vv32Wx08eFDZ2dnKysrSnj17jFjI2f4b4Hwk/lDvzp49q0OHDkmSOnfufMn5J06cqBtvvFF/+9vf9MUXX+jkyZPGQ+hdXFx02223af78+U4HDuff3VpTTZs2rfKXRZJjcuj06dNXNGAoLCyUJIcheKpi/8IqKiqqVFbd57KrqhPhctri5eWlwsLCKttSV9zc3NSzZ0/17NlT06dP12uvvaZFixapuLhY7733XqWH+17qAcTnO7/dF0tk2cuKi4ur7PC5HFU9QPh85+8z+37Zv39/pV/hXej8O49uuukmrV+/Xi+//LI++eQT5efna/v27dq+fbueffZZWa1WzZs3z2Foy2XLlql///5KTEzUrl27dOjQISUlJSkpKUnXXHONJk6cqMcff/ySx9zF1MX2rw8XC1jtZVUlxao7Fmq732w2m/7+979r9erVOnbsmDHdxcVFHTt21JgxY/Tee+9ddHnVudzjFgCcRexY94gdL5+93b/88ouRlKtOeXm5ioqKjO353nvvacWKFZW+22+44QaFhobqH//4h8P084fEqurXhdK5/eHh4aHi4mKH6bWJCc7/5X5167sYZ2IFe/ySm5tbo+HHT506ReIPAK4wYrG615hjMfvQ39K5G4BuuOGGS9apqKjQnj171LVrV2Mkgrpod1XHVEPsm127dumZZ57Rjh07HKZbLBYNGTJE33//fZVDigLOIPGHerd7927jp9zV/RT7QkFBQQoKClJJSYm+/PJLpaWlKSUlRd999502b96sX375Rf/85z/rvVO/tLRUZ8+erfICfn6ne1XBQlVfuBf+Y15b9mDlUj/jt991XNu7aeqyLfbyy23LP/7xDyUkJBjPdKuOi4uLpkyZog8//FDp6emX/Quw89ttDwqqYu+o8fT0rPfj82I8PDxUUFCgl156qcohQi+mXbt2evrpp7VgwQJ9++232rFjh7Zu3art27dr7969ioiI0Icffqi2bdtKOretQ0NDFRoaqhMnTmj79u3asWOHPvvsMx06dMgYEio2NrbWn+dq3f4XO6ft7XTmn4na7rcXX3xRzz//vKRzQ1AMHjxY/v7+6tSpk7y8vLR///5aJ/4A4EojdvwvYsf6bYsz7KNEzJ07t8ohxKqTnJysJ598UpJ06623KiQkRF26dFHnzp3l7e2t0tLSSom/84d9qi7usdlsVT5DuTYxwfkjYNR3otW+rgceeMB4viEA4OpCLPZfxGKX35abbrpJ119/vQ4dOqTU1NQa9XXs2rVLkyZNkre3t/72t7+pe/fu9dbuK71v9u3bp/vuu08lJSXy9/fX+PHj1a1bN3Xu3NkYRWHSpEkk/nDZeMYf6l1iYqKkcz97/vWvf33Rec+ePat9+/Zp165dks7diTFo0CDNnDlT7777rp599llJ554ntmfPnvpt+P934XB6dt9//70kqX379sY/sOc/k6uqf8TPv+v2ctjHiD5w4EC1nQEVFRVGG+3PYasP9rZ899131c6zb98+I1i63La4ublp37592rp1q/Ly8i45v/1n/FWNm+2M5s2bGz/d//bbb6udz17WoUOHy1rf5bLfUWUfTqkq+/fv1zfffGM8d8Vms+nnn39WamqqpHPPQOzVq5ciIiK0evVqbdiwQc2bN9fp06e1adMmSec6o7799lvjPGnZsqWGDx+uefPm6dNPPzWGcLrcpNPVuv2ruz5I/z0nnBkSozb7rbS0VKtXr5YkRUdH67nnntNvf/tb9ezZ0whIjxw5UuM2AEBDI3b8L2LH+m2LM2ryHf3LL7/o66+/dthv9hvVxo4dq1dffVVhYWHq06eP8eyWqr6jmzVrpuuvv16S9MMPP1S5rh9//FFlZWUO02obE1x77bVq1arVRT/fsWPHNHHiRM2cObPGzxCqSk22Y15ennbu3KnDhw/X+NcLAIC6Qyz2X8RiddOWESNGSDp3Q1RNfvG/du1aSef6pexDjddXu6/0vvn73/+ukpISderUSUlJSXrggQc0YMAAh6HT7UOwA5eDxB/q1Y4dO7R+/XpJ0vTp0x2+UKuyZcsWjRgxQtOnT6/yC3fAgAHG3+ePj2y/Y6g+/jFct25dpWnl5eV66623JElDhw41pp+fXKoq0LA/zL4qznyGvn37ytvbW2VlZcaX4YU++OADHT9+XC4uLrr11lsvuczast+ps3v3bn311VdVzpOQkCBJatOmjTGmem0NGzZMXl5eOnPmjP785z9fdN7c3Fxt3bpV0rkH7V4u+2d96623qjw+T548qX/+85+Szj1Dxhl1fQzb25qUlFTlUJNlZWWKiopSaGioli5dKuncME933XWXHnjgAX3zzTeV6nTs2NEYask+znh8fLzGjx9vLON8rq6uCg4OllTzseZr8pnqY/vX1g8//GAEf+f77rvvlJ6eLsnxGnEptdlveXl5RmBb3Vj39n/c7Ms4X31ePwHAWcSOjogdLz92rCv2dm/cuLHaDqunnnpKYWFh+r//+z9jmv1u7eq+o5OSkoy/z/+OvvPOOyVJ77zzTpVx1Pnf7XaXExPYY6eqjl9J+uijj7Rr1y7t2rXrkkNhXYx9O27durXK5yBL0l/+8hfde++9mjx5Ms+2AYArjFjMEbFY3cRiDz30kFq3bq3CwkLNmTPHeIZdVT799FO9//77Rj37rzfrq91Xet+cP4zu+aMu2KWmpurw4cOS6qYvDY0XiT/Ui6KiIq1du1YPPfSQKioqFBwcXO3D2883ePBgWSwW5efn64knnnB43kRRUZHR0d22bVuHh8vb72C1Xxjr0uuvv661a9ca/3QWFhbq8ccf13fffSdvb2898MADxrwdO3Y07pb985//bPwM3GazacOGDXrxxRerXY/9eRr2L4CL8fDw0PTp0yWdS7yc3z5J+vjjj/XHP/5R0rmx1s8fT7uuBQQEaMiQIZKkRx99VNu3bzfKzp49q/j4eGP4oscff/yyh3Xw8fExOlPeffddRUREaPfu3Q6BVkVFhbZu3ar77rtPBQUFGjFihAICAi5rvZI0bdo0eXl5ae/evXrsscccOn2ys7P10EMPKScnR35+fpoyZYpTy67rYzg8PFytW7fWgQMHFBkZ6bDcEydOaMaMGdq3b5+aNm1qHMMWi8UIYJ566imHzpiKigqtXbtWe/fudQh0Ro8eLRcXF/3nP//RqlWrjOFA7J/lpZdekiTjGLkc9bn9a8tms+mRRx5RRkaGMe3777/X73//e9lsNg0fPlzdunWr8fJqs99atmwpHx8fSeeC3POfC3TixAnNnz/fCJqlys8ctF976uP6CQA1RexI7CjVT+xYV0aMGCGr1apTp07pwQcfdPjFWmFhoebPn68vvvhCLi4uxraW/nsX+TvvvONw93ZhYaGef/55vfLKK8a087+jH3zwQfn4+Oi7777T7NmzjTvQbTab3nzzTb322muV2ng5MUFERISuueYaffnll1qwYIFOnz5tlG3ZskXPPfec0a7L0a9fP916660qKyvTtGnTHDruzp49qxUrVhjJyWnTpl2ywxkAUDeIxYjFpPqLxVq0aKGFCxeqadOm2rx5s8LDw5WSkuLQl1dYWKgVK1ZoxowZstlsGjBggO677756b/eV3jf2+qmpqfryyy+N6WVlZXr//fc1c+ZMY1pVN4QDNcUz/nBZnn76aePhptK5i9SpU6eUnZ1t3JUwdOhQLVu2TE2aXPpwa9asmf7617/qwQcf1MaNG/Wvf/1L7du3l6urq7Kzs1VcXCwPDw8tWbLEYbzum266SZL01Vdf6Te/+Y38/f31wgsvXPbna9q0qQYNGqQFCxZo5cqV8vPz048//qji4mJ5eXnpr3/9q8NPsV1dXTVjxgzNnTtXO3bs0JAhQ9SxY0cdO3ZMx48f1+23364TJ04YQyCc7+abb9bevXv16quvasuWLQoJCVFUVFS1bXvwwQf1888/66233tKCBQv0/PPPq127djpy5IgxFMFdd92lOXPmXPZ2uJQ///nPevjhh5Wenq777rtP119/vVq2bKmffvpJhYWFcnNz04wZMzRy5Mg6Wd/vfvc7lZWVafny5UpJSVFKSoosFovxzLlDhw4ZHR2/+c1vtGTJkjpZb7t27RQfH6/HHntM//73vzVkyBD5+/urvLxcWVlZqqio0HXXXacXXnhBLVu2dGrZdX0Me3t7a+XKlYqMjNQXX3yhYcOGyd/fXy4uLvrpp5909uxZNWnSRM8++6zDXVALFixQWFiY9u7dq7vvvls33HCDWrRoocOHDxtDq/7f//2f/P39JUk9evTQjBkz9Nxzz+mZZ57RK6+8ohtuuEGnT59Wdna2ysrK1L59e+PZNpejPrd/bfXv318ZGRkaO3assU3sHYF9+vTRwoULnVpebfZbkyZN9Nhjj+lPf/qTcd3p0KGDzp49qwMHDqisrEw333yzfvnlF+Xl5enIkSMOvwK4+eablZaWpgULFuitt97Svffeq9DQ0DraQgDgiNiR2FG68rFjXWjatKlWrFihiIgI/fDDD7r77rvVsWNHeXh4aP/+/cYv7WbPnu0w8sDMmTMVFRWlrKwsDRs2zOjsOXDggM6cOaN27drJxcVFBw8edBiGs3Xr1lq+fLl+//vf67333tMnn3yizp0768iRIzp+/LiGDh2qzz77zOFO8MuJCfz9/bV06VI9/vjjWrt2rZKTk9WpUyfl5ubql19+kSSNGzdO995772Vvy2XLlumhhx7Srl27dM899+iGG26Qt7e3srOzjQ7XKVOmaNKkSZe9LgCAI2IxYjGpYWKx22+/XatXr9ajjz6qb775RhEREbr22mt1ww03qKysTD/99JNxM/ndd9+tuLi4SjcA1Ve7r+S+eeCBB/T+++8rLy9P4eHh6tChg7y8vPTzzz/r5MmT8vT0VEBAgNLT03lsCy4LiT9clr179zq8d3V1lYeHhzp16qSePXtq9OjRxlB/NRUUFKTExET97W9/086dO7V//341adJEbdq00aBBg/TAAw8Yww3ajR07Vj/++KPee+89/fzzzyotLa2TYWFcXFz0/PPPa9WqVUpOTtaePXtksVg0YsQIPfzww2rXrl2lOhMnTlSbNm2UkJCg3bt3a9++ferYsaMeeughhYeHKzw8vMp1PfHEEzp9+rS++OIL/fjjj9UOfXN+2+bPn6877rhDb731lr7++mv98MMPslgsuv322xUaGqo77rjjsrdBTfj4+Oj1119XcnKy1q9frz179uj48ePy8/PTb37zG4WHh+vmm2+u03Xef//9+s1vfqPk5GR98cUXOnjwoH788Ue5urqqdevWGjZsWK2Ov0sZNGiQPvjgA/3tb3/TZ599pp9++klNmzbVTTfdpN/85jeaNGlSlQ+JvpT6OIZ79uypDRs26PXXX9e///1vHThwQKWlpWrdurUCAwM1derUSr9G+9WvfqWkpCStXr1aKSkpys7O1i+//KJWrVpp5MiR+t3vflfp4d4PP/yw/P399Y9//EPfffed9u7dK3d3d910000KCQnR5MmTjTvhLld9bf/auvHGG7Vw4UI9++yz2rp1q06fPq1u3brpt7/9re69994qHyh+KbXZb/fee686duyoVatWKTMzU5mZmWrevLluueUW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hm4AAAAAAAAA0NBsNpsWL16srVu3ymazKT09Xa+99prCwsIkSaGhodqwYYO2bdum0tJSJSQkKDc3VyEhIZKkcePGaeXKlcrOzlZhYaEWLVqkwMBAtW/fXh06dFDfvn21aNEiFRYWKjs7WytWrFBoaKgkKSQkRDk5OUpISFBpaam2bdumDRs2VHqmIAAAwKXwiz8AAAAAAAA0eiEhIZo9e7bmz5+vo0ePytfXV4888ojGjBkjSQoODta8efOMcn9/f61atUo+Pj6SpOjoaJWVlSk8PFxFRUUKCgrS8uXLjeXHx8drwYIFGjZsmFxdXTV27FhFRUVJkiwWi9asWaO4uDjFx8erZcuWio2NVf/+/a/0ZgAAAP/jSPwBAAAAAACgUdqzZ4/D+0mTJjkM9XmhMWPGGInACzVt2lQxMTGKiYmpstzX11fx8fHVLrtnz556++23a9BqAACA6jHUJwAAAAAAAAAAAGACJP4AAAAAAAAAAAAAE6izxF9hYWFdLQoAAKDRqU0sdeLECYWEhGj79u3GtHnz5qlHjx4KCAgwXu+8845RnpycrJCQEPXu3Vvjxo1Tenq6UVZeXq6lS5dqwIABCggIUGRkpI4dO2aU5+bmKioqSv369VNQUJDi4uJUVlZmlO/atUsTJkxQQECAhg4dqsTERKc/EwAAQG3QLwUAAHCO04m/wMDAKqffdtttTq+czioAANDY1FUstXPnToWFhengwYMO07/55hstXLhQ6enpxissLEyStH37di1cuFBLlixRWlqaRo8ercjISJ0+fVqStHLlSqWmpmrdunVKSUmRu7u7YmNjjWXPmDFDnp6eSklJUVJSkrZu3aqEhARJ0smTJzV9+nSNHTtWaWlpiouL0+LFi7V7926nPhcAAMDF1GW/FAAAgBk1qclMBw4c0B//+EfZbDYVFhbqvvvucygvLCzUtdde69SKd+7cqSeffLLazqrf/va3lerYO6tWrVqlXr16ae3atYqMjNTmzZvl4eHh0FnVokULzZ07V7GxsXrllVckneus8vPzU0pKinJychQZGamEhARFREQYnVWPPvqowsLClJaWpujoaHXt2lW9evVy6rMBAACcr65jqeTkZMXHx2vWrFmaOXOmMf3s2bPau3evevToUWW9xMREjRw5Un379pUk3X///XrnnXe0ceNGjR8/XomJiYqJiVHb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AAAAAAAAAMAESPwBAAAAAAAAAAAAJkDiDwAAAAAAAAAAADABEn8AAAAAAAAAAACACZD4AwAAAAAAAAAAAEyAxB8AAAAAAAAAAABgAiT+AAAAAAAAAAAAABMg8QcAAAAAAAAAAACYAIk/AAAAAAAAAAAAwARI/AEAAAAAAAAAAAAmQOIPAAAAAAAAAAAAMAESfwAAAAAAAAAAAIAJkPgDAAAAAAAAAAAATIDEHwAAAAAAAAAAAGACJP4AAAAAAAAAAAAAEyDxBwAAAAAAAAAAAJgAiT8AAAAAAAAAAADABEj8AQAAAAAAAAAAACZA4g8AAAAAAAAAAAAwARJ/AAAAAAAAAAAAgAmQ+AMAAAAAAAAAAABMgMQfAAAAAAAAAAAAYAIk/gAAAAAAAAAAAAATIPEHAAAAAAAAAAAAmACJPwAAAAAAAAAAAMAESPwBAAAAAAAAAAAAJkDiDwAAAAAAAAAAADABEn8AAAAAAAAAAACACZD4AwAAAAAAAAAAAEyAxB8AAAAAAAAAAABgAiT+AAAAAAAAAAAAABMg8QcAAAAAAAAAAACYAIk/AAAAAAAAAAAAwARI/AEAAAAAAAAAAAAmQOIPAAAAAAAAAAAAMAESfwAAAAAAAAAAAIAJkPgDAAAAAAAAAAAATIDEHwAAAAAAAAAAAGACJP4AAAAAAAAAAAAAEyDxBwAAAAAAAAAAAJgAiT8AAAAAAAAAAADABEj8AQAAAAAAAAAAACZA4g8AAAAAAAAAAAAwARJ/AAAAAAAAAAAAgAmQ+AMAAAAAAAAAAABMgMQfAAAAAAAAAAAAYAIk/gAAAAAAAAAAAAATIPEHAAAAAAAAAAAAmACJPwAAAAAAAAAAAMAESPwBAAAAAAAAAAAAJkDiDwAAAAAAAAAAADABEn8AAAAAAAAAAACACZD4AwAAAAAAAAAAAEyAxB8AAAAAAAAAAABgAiT+AAAAAAAAAAAAABMg8QcAAAAAAAAAAACYAIk/AAAAAAAAAAAAwARI/AEAAAAAAAAAAAAmQOIPAAAAAAAAAAAAMAESfwAAAAAAAAAAAIAJkPgDAAAAAAAAAAAATIDEHwAAAAAAAAAAAGACJP4AAAAAAAAAAAAAEyDxBwAAAAAAAAAAAJgAiT8AAAAAAAAAAADABEj8AQAAAAAAAAAAACZA4g8AAAAAAAAAAAAwARJ/AAAAAAAA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9JLy8/NltVqNnqqgoED5+fny8vIyArurjwHVqVPnNyMyZWRklAsHr2fTpk368MMP9dFHH6l+/fqSpNdee+03w7IDuP8w1CeAO9K6dWs98sgjeuWVV3TkyBEVFxfLarVq/fr1OnnyZLlhmK7lylVpb731li5evKicnBy9/vrrCgwMLBdsXc3Z2fmmV6hdERISYgzTWVRUpPPnz2vKlCkaP3687OzstGrVKk2ePFl5eXlydXWVq6urqlevLicnJ7333nt67bXXZLVa5ebmpmrVqpU7o/x6Hn30UXXs2FHTp09XTk6OLl68qLfeekulpaUKCQm56euvJScnRwsWLFBRUZEOHjyoVatWaeDAgddctkWLFqpfv75mzJihwsJCXbx4UfHx8Ro6dKhKS0uNs7ccHR1VUlKidevWaffu3SouLpZ0ef9KMg7IAQCAB9vN+imr1SpnZ2fZ29vr0qVLSkxM1NGjR43eol+/flq8eLGOHz+uS5cuacaMGcZVeYWFhSotLVW1atUkST/88INxX5mioiJ16tRJJSUleu+991RUVKT09HTFx8fr0qVLN627f//++uCDD4x73Pzf//2f+vbtqw0bNlTEbgIAALihqVOn6pNPPtG7776r/Px82Ww2ff/99xo5cqQef/xxRUREqHHjxoqJiVFBQYEKCgoUGxurevXqqVWrVtdcZ79+/bRw4UIdOnRIpaWl2rRpk7Zv364+ffrctJ6CggJZLBa5uLjIZrNp165dWrt2rdHDAbh/EfwBuCMuLi5asWKFvLy89MILL8jf31+dOnXS+vXrtXTpUjVq1OiGr69Ro4aWLl2qo0ePqmPHjurevbvq1Kmj2bNnX/c1ISEhOnfunPz8/HT+/Pkbrt/V1VXLli1TamqqOnTooC5dushisRj38ZswYYLq16+vsLAwtWrVSqtXr9b8+fPl7OysadOmqaysTJ07d1br1q319ddf37Cuq73xxhuqW7eu+vTpo3bt2unIkSN6//33yw2ZeTuaNWumU6dOKSAgQFOmTNHkyZONs+J/zcHBQQkJCcrNzVW3bt0UHBys9PR0LV26VM7OzoqIiJCPj49CQkLUvn17rV+/XoMGDTLO6GratKn8/PzUvn37331PQgAAYB4366fGjRunixcvql27dgoNDdVXX32lXr16Gb3FsGHD1LNnTw0ePFjBwcGqUaOG0RM1bNhQkydP1qRJk+Tn56exY8fq2WeflaOjo44ePSo3NzctWbJEe/fuVXBwsIYMGaKBAwdqwIABN637j3/8oyZMmKBXX31VrVq10tixYzV06FANGTKkwvYVAADA9bRp00YffvihvvvuO+M41JgxYxQYGKjFixfL0dFRCQkJKikp0VNPPaWQkBAVFxdr6dKl1x1+8/nnn9ef/vQnjR8/Xv7+/kpISNDMmTPVpk2bm9Zz5ZhVWFiYAgMDtWDBAj333HM6ceKEioqK7vbbB3AP2dlu5ZIZAAAAAAAAAAAAAFUaV/wBAAAAAAAAAAAAJnDta4QBANf14osvas+ePdedHxcXp549e97Sur755hs999xz151fu3Ztbdy48bZrBAAAAAAAAAA8eBjqEwAAAAAAAAAAADABhvoEAAAAAAAAAAAATIDgDwAAAAAAAAAAADABgj8AAAAAAAAAAADABAj+AAAAAAAAAAAAABMg+AMAAAAAAAAAAABMgOAPAAAAAAAAAAAAMAGCPwAAAAAAAAAAAMAECP4AAAAAAAAAAAAAEyD4AwAAAAAAAAAAAEzg/wHZHd8nRffsvwAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1800x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cols = ['Shortness_of_breath','Headache',\t'Corona']\n",
    "\n",
    "# Set up the figure and axes\n",
    "\n",
    "fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(18, 6))\n",
    "\n",
    "# Plot univariate distributions for each column\n",
    "for i, col in enumerate(cols):\n",
    "    sns.countplot(data=df , x=col, ax=axes[i])\n",
    "    axes[i].set_title(f'Distribution of {col}' , fontsize=18 )\n",
    "    axes[i].set_ylabel('Count')\n",
    "    axes[i].tick_params(axis='x')\n",
    "    axes[i].grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "2f371eae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cols = ['Sex',\t'Known_contact']\n",
    "\n",
    "# Set up the figure and axes\n",
    "\n",
    "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(18, 6))\n",
    "\n",
    "# Plot univariate distributions for each column\n",
    "for i, col in enumerate(cols):\n",
    "    sns.countplot(data=df , x=col, ax=axes[i])\n",
    "    axes[i].set_title(f'Distribution of {col}' , fontsize=18 )\n",
    "    axes[i].set_ylabel('Count')\n",
    "    axes[i].tick_params(axis='x')\n",
    "    axes[i].grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "db82a81c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x600 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cols = ['Cough_symptoms', 'Fever', 'Sore_throat']\n",
    "\n",
    "# Set up the figure and axes\n",
    "\n",
    "fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(18, 6))\n",
    "\n",
    "# Plot univariate distributions for each column\n",
    "for i, col in enumerate(cols):\n",
    "    sns.countplot(data=df , x=col,hue='Corona', ax=axes[i]  , palette=\"Set2\")\n",
    "    axes[i].set_title(f'Distribution of {col}' , fontsize=18 )\n",
    "    axes[i].set_ylabel('Count')\n",
    "    axes[i].tick_params(axis='x')\n",
    "    axes[i].grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "3335dbb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cols = ['Sex',\t'Known_contact']\n",
    "\n",
    "# Set up the figure and axes\n",
    "\n",
    "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))\n",
    "\n",
    "# Plot univariate distributions for each column\n",
    "for i, col in enumerate(cols):\n",
    "    sns.countplot(data=df , x=col,hue='Corona', ax=axes[i]  , palette=\"Set2\")\n",
    "    axes[i].set_title(f'Distribution of {col}' , fontsize=12 )\n",
    "    axes[i].set_ylabel('Count')\n",
    "    axes[i].tick_params(axis='x')\n",
    "    axes[i].grid(True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61c3d7a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "Cough_symptoms: A significant number of individuals who tested negative also reported no cough symptoms. However, among those who reported having a cough, the number of positive cases is relatively higher.\n",
    "\n",
    "Fever: Most individuals did not report having a fever. Among those who did, the number of positive cases is higher than negative cases.\n",
    "\n",
    "Sore_throat: The majority did not experience this symptom.\n",
    "\n",
    "Shortness_of_breath: This symptom was also not common among the individuals.\n",
    "\n",
    "Headache: A notable number of individuals reported not having headaches.\n",
    "\n",
    "Age_60_above: A considerable number of individuals were below 60 years of age.\n",
    "\n",
    "Sex: The number of females and males in the dataset is almost evenly distributed.\n",
    "\n",
    "Known_contact: Most individuals did not have a known contact with a confirmed case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "73ef8713",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiEAAAGvCAYAAACNRQWyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAviUlEQVR4nO3de1xVVf7/8TcXSUAUC9NGbSzj0JgXjqLkpTS0nCzRcbxU6uSUNklZeCFvaWnp6Gial1FLR8v0m6ZpzUyYv6xknDLQUptpHhZY3nIyUVFAEIH1+8Mv5+uR2zmILMXX8/HgUWfttdf6nHV28nbvfXY+xhgjAACAKuZruwAAAHBtIoQAAAArCCEAAMAKQggAALCCEAIAAKwghAAAACsIIQAAwApCCAAAsIIQAqDK8GzEqwOfE6oKIQRXnQULFigiIqJSxho3bpxiYmK83i8iIkILFixwvR48eLAiIiJcP7fffrucTqf69Omjt956SwUFBZVSb0V8+eWXevLJJxUdHa3mzZurS5cuGj9+vA4ePOjWLyYmRuPGjbusdfzhD3+4bONfSWbPnq3o6GhFRkbqvffe82ifyjyuL8XixYv1l7/8xfX6SqkL1ZO/7QKA6qJZs2Z64YUXJEkFBQU6deqUkpKSNH36dH355ZeaO3eufHx8qrSm7du3a+jQoeratatefvll1a5dWwcPHtTy5cvVr18/rVu3TjfffHOV1LJu3TqlpaVVyVw2fffdd1q6dKn69++vXr166dZbb7VdkldeffVVPf3007bLwDWCEAJUklq1aikyMtKtLSYmRrfccov++Mc/KiYmRrGxsVVa05IlS9SiRQvNnz/f1RYdHa3OnTvr3nvv1YoVK1zBCZUjIyNDkvTAAw8oKirKbjHAFY7LMbjqbdiwQc2aNdOePXs0YMAAtWjRQl26dNHSpUvd+p06dUrjx49XdHS02rZtq1mzZqmwsPCy1zd48GDdeOONWrNmTYnbz549q6ioKE2fPt2tvbCwUJ06ddKUKVMkSd98840effRRtWnTRk6nU0OGDNGePXvKnDs9Pb3E9htvvFHPP/+8Onbs6NZ+7tw5/elPf1LHjh0VGRmpxx57TAcOHHDr89lnn+mRRx5RmzZtFB0drdGjR+u///2va3vR57Fu3Tp16tRJd999t5555hlt3LhRP/74oyIiIrRhwwYdPnxYERER2rRpk5555hk5nU61bdtWEydOVHZ2ttuc69at0wMPPOC6nLRgwQLl5+e7tp84cUJjxoxRx44d1aJFC/Xq1cvtMkhhYaHmzZunmJgYNW/eXDExMZozZ47OnTtX5vqVJDExUX369JHT6VTHjh01efJknTp1StL5SxeDBw+WJD366KMVutS3ZcsWde/eXS1atFC/fv20fft217bk5GRFRERozZo1uueee9ShQwf985//lCTt3LlTgwYNUqtWrdSuXTuNHTtWJ06ccBt7x44devzxx9W2bVvXOixYsMD130HRZZeFCxcWuwSzdetWxcbGqkWLFurevbvHl5mAshBCUC0UFhYqPj5ePXr00Ouvv642bdpo9uzZ2rZtm2v70KFDtXXrVo0ZM0YzZ87Url27lJiYeNlr8/PzU/v27fX111+7/eIsct1116l79+7atGmTWyhKTk7WsWPH1KtXL2VlZWno0KGqW7eu5s+fr7lz5yonJ0ePP/64MjMzS527S5cu2rVrlwYPHqz169fr0KFDrm39+vVTt27d3PonJiYqNTVVM2bM0OTJk/Wvf/1LI0eOdG1///339dhjj6l+/fqaM2eOxo8fr127dmnAgAE6fvy4q19BQYGWLFmil19+WfHx8RozZow6d+6sevXqae3aterSpYur7wsvvKCGDRtq0aJFGjp0qN59910tWbLEtf21117TpEmT1L59ey1ZskQDBw7U0qVLNXnyZFefhIQEpaWlacqUKXr99dfVrFkzjR07VsnJyZKkpUuXavXq1Xrqqae0fPlyPfzww1q2bJnbPJ5YtGiRRo4cqVatWmn+/Pl66qmntHnzZg0ePFi5ubnq16+fq67Jkydr4cKFXo0vSRMmTNDvfvc7LViwQMHBwRo2bFixy1hz587V2LFjNXbsWEVGRmrHjh0aMmSIatasqVdffVUTJkxQSkqKfve73yk3N1eStHfvXg0ZMkShoaGaO3euFi9erNatW2vhwoX64IMPJElr166VJPXt29f170UmT56sIUOGaPHixbrxxhs1btw47d271+v3B7gxwFVm/vz5xuFwuF6/++67xuFwmHfeecfVdvbsWdOiRQszdepUY4wxn376qXE4HObTTz919cnOzjbR0dHmnnvu8boGh8Nh5s+f73o9aNAgM2jQoFL7z5w50zgcDnPs2LEStycnJxuHw2GS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AAAAKwghAADACkIIAACwghACAACsIIQAAAArCCEAAMAKQggAALCCEAIAAKwghAAAACsIIQAAwApCCAAAsIIQAgAArCCEAAAAKwghAADACkIIAACwghACAACsIIQAAAArCCEAAMAKQggAALCCEAIAAKwghAAAACsIIQAAwApCCAAAsIIQAgAArCCEAAAAKwghAADACkIIAACwghACAACsIIQAAAArCCEAAMAKQggAALCCEAIAAKwghAAAACsIIQAAwApCCAAAsIIQAgAArCCEAAAAK7wOIcePH1dcXJyioqIUHR2tadOmKT8/v8S+KSkp6tevn5xOpzp37qzXXnvtkgsGAADVg9chJD4+XkFBQdq2bZvWr1+v7du364033ijWb9++fXriiSf0yCOP6KuvvtJrr72m5cuX68MPP6yMugEAwFXOxxhjPO184MAB3XffffrHP/6h+vXrS5ISExM1a9Ysffrpp259X3rpJWVkZOiVV15xtf3www+qVauW6tWr53GB6emZ8rxCAABgk4+PFBYW4lFfr86EpKamKjQ01BVAJKlp06Y6cuSITp8+7db366+/VqNGjTRq1ChFR0fr/vvvV0pKilcBBAAAVF9ehZDs7GwFBga6tRW9PnPmjFv7qVOntHLlSsXGxuqzzz7T1KlTNXPmTC7HAAAASV6GkKCgIOXk5Li1Fb0ODg52aw8ICFDXrl3VpUsX+fv7q23bturVq5c2bdp0iSUDAIDqwKsQEh4eroyMDKWnp7va9u3bpwYNGigkxP36T9OmTZWXl+fWVlBQIC9uQQEAANWYVyGkSZMmatOmjaZPn66srCwdOnRIixYtUt++fYv1feihh/Txxx/r/ffflzFGO3bs0N/+9jf16tWr0ooHAABXL6++HSNJ6enpmjp1qpKTk+Xr66vevXtrzJgx8vPzk9Pp1JQpUxQbGytJSkpK0vz58/XDDz/o+uuv19ChQ/XQQw95VSDfjgEA4OrhzbdjvA4hVY0QAgDA1eOyfUUXAACgshBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFYQQgAAgBWEEAAAYAUhBAAAWEEIAQAAVhBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFYQQgAAgBWEEAAAYAUhBAAAWEEIAQAAVhBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFYQQgAAgBWEEAAAYAUhBAAAWEEIAQAAVhBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFYQQgAAgBWEEAAAYAUhBAAAWEEIAQAAVhBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFZ4HUKOHz+uuLg4RUVFKTo6WtOmTVN+fn6Z+3z33Xdq1aqVkpOTK1woAACoXrwOIfHx8QoKCtK2bdu0fv16bd++XW+88Uap/XNycjR69Gjl5uZeSp0AAKCa8SqEHDhwQCkpKUpISFBgYKAaN26suLg4rV69utR9pkyZom7dul1yoQAAoHrxKoSkpqYqNDRU9evXd7U1bdpUR44c0enTp4v1f++993TgwAE9/fTTl14pAACoVvy96Zydna3AwEC3tqLXZ86cUe3atV3t+/bt09y5c/X222/Lz8+vEkoFAADViVdnQoKCgpSTk+PWVvQ6ODjY1Xb27FmNHDlSEyZM0C9+8YtKKBMAAFQ3XoWQ8PBwZWRkKD093dW2b98+NWjQQCEhIa62f/3rX9q/f78mTpyoqKgoRUVFSZKefPJJvfjii5VTOQAAuKr5GGOMNzs88sgjatCggaZOnaqTJ09q+PDh6t69u0aMGFHmfhEREVq5cqWio6O9KjA9PVPeVQgAAGzx8ZHCwkLK76gKfEV3/vz5ys/PV9euXdW/f3/dddddiouLkyQ5nU799a9/9XZIAABwDfL6TEhV40wIAABXj8t6JgQAAKAyEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFYQQgAAgBWEEAAAYAUhBAAAWEEIAQAAVhBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFYQQgAAgBWEEAAAYAUhBAAAWEEIAQAAVhBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFYQQgAAgBWEEAAAYAUhBAAAWEEIAQAAVhBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFYQQgAAgBWEEAAAYAUhBAAAWEEIAQAAVhBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFhBCAEAAFYQQgAAgBWEEAAAYAUhBAAAWEEIAQAAVhBCAACAFV6HkOPHjysuLk5RUVGKjo7WtGnTlJ+fX2Lft99+W927d5fT6VT37t21evXqSy4YAABUD16HkPj4eAUFBWnbtm1av369tm/frjfeeKNYvy1btmjOnDmaOXOmvvrqK82YMUOvvvqqNm/eXBl1AwCAq5xXIeTAgQNKSUlRQkKCAgMD1bhxY8XFxZV4huPo0aMaNmyYIiMj5ePjI6fTqejoaO3YsaPSigcAAFcvf286p6amKjQ0VPXr13e1NW3aVEeOHNHp06dVu3ZtV/vAgQPd9j1+/Lh27Nih8ePHX2LJAACgOvDqTEh2drYCAwPd2openzlzptT9jh07pmHDhql58+Z68MEHK1AmAACobrwKIUFBQcrJyXFrK3odHBxc4j67d+9W3759dcstt2jx4sXy9/fq5AsAAKimvAoh4eHhysjIUHp6uqtt3759atCggUJCQor1X79+vYYMGaJHH31Ur7zyigICAi69YgAAUC14FUKaNGmiNm3aaPr06crKytKhQ4e0aNEi9e3bt1jfzZs368UXX9SCBQv02GOPVVrBAACgevAxxhhvdkhPT9fUqVOVnJwsX19f9e7dW2PGjJGfn5+cTqemTJmi2NhY9ezZU2lpaapZs6bb/j179tTUqVO9mC9T3lUIAABs8fGRwsKKXx0psa+3IaSqEUIAALh6eBNCeGw7AACwghACAACsIIQAAAArCCEAAMAKQggAALCCEAIAAKwghAAAACsIIQAAwApCCAAAsIIQAgAArCCEAAAAKwghAADACkIIAACwghACAACsIIQAAAArCCEAAMAKQggAALCCEAIAAKwghAAAACsIIQAAwApCCAAAsIIQAgAArCCEAAAAKwghAADACkIIAACwghACAACsIIQAAAArCCEAAMAKQggAALCCEAIAAKwghAAAACsIIQAAwApCCAAAsIIQAgAArCCEAAAAKwghAADACkIIAACwghACAACsIIQAAAArCCEAAMAKQggAALCCEAIAAKwghAAAACsIIQAAwApCCAAAsIIQAgAArCCEAAAAKwghAADACkIIAACwghACAACsIIQAAAArCCEAAMAKQggAALCCEAIAAKwghAAAACv8bRdQ1dq+8g/bJQAAcEWZ3LWxekbeUuXz+hhjTJXP6oX09ExVVoUEEAAASrdj9N2XPIaPjxQWFuJRX68vxxw/flxxcXGKiopSdHS0pk2bpvz8/BL7JiUlqWfPnoqMjNT999+vTz/91NvpKg0BBACAslX170qvQ0h8fLyCgoK0bds2rV+/Xtu3b9cbb7xRrN/+/fs1YsQIPfvss9q5c6dGjBih+Ph4HT16tDLq9goBBAAAz/xt9w9VNpdXIeTAgQNKSUlRQkKCAgMD1bhxY8XFxWn16tXF+m7cuFFRUVHq1q2b/P391aNHD7Vt21Zr166ttOIBAEDlmvrxoSqby6sQkpqaqtDQUNWvX9/V1rRpUx05ckSnT59265uWliaHw+HWdtttt2nv3r2XUC4AAKguvAoh2dnZCgwMdGsren3mzJly+9asWbNYPwAAcG3yKoQEBQUpJyfHra3odXBwsFt7YGCgcnNz3dpyc3OL9QMAAFeOyV0bV9lcXoWQ8PBwZWRkKD093dW2b98+NWjQQCEh7l/HcTgcSk1NdWtLS0tTeHj4JZRbMZXxlSMAAK4FVfm8EK9CSJMmTdSmTRtNnz5dWVlZOnTokBYtWqS+ffsW6xsbG6uUlBQlJiYqPz9fiYmJSklJUa9evSqteG8QRAAAKFtV/670+mFl6enpmjp1qpKTk+Xr66vevXtrzJgx8vPzk9Pp1JQpUxQbGytJ2rZtm2bPnq2DBw+qYcOGSkhIUOfOnb0qsDIfVibxdV0AAC5WmU9M9eZhZdfUE1MBAMDldVmfmAoAAFAZCCEAAMAKQggAALCCEAIAAKwghAAAACsIIQAAwApCCAAAsIIQAgAArCCEAAAAK/xtF1AeHx/bFQAAAE9583v7in9sOwAAqJ64HAMAAKwghAAAACsIIQAAwApCCAAAsIIQAgAArCCEAAAAKwghAADACkIIAACwghACAACsIIQAAAArrqkQcvz4ccXFxSkqKkrR0dGaNm2a8vPzbZdV5RITE9WsWTM5nU7XT0JCgiRpz5496tevn5xOp2JiYrRu3Tq3fTdu3Kh7771XkZGR6tOnj3bt2uXaVlBQoJkzZ6pDhw5yOp0aPny4fv75Z9f26rD+J06c0L333qvk5GRXm801K2/uK1FJa/jCCy+oefPmbsfk2rVrXdtZQ2nv3r36/e9/r3bt2qljx4567rnndOLECUkcg54qaw05Bi0x15BBgwaZ0aNHmzNnzpiDBw+aBx54wCxdutR2WVVuxowZZty4ccXaMzIyTLt27cyqVavMuXPnzOeff26cTqfZs2ePMcaYL774wjidTrNz506Tl5dnVqxYYaKjo82ZM2eMMcYsWLDA9OzZ0xw5csRkZmaa+Ph4M2zYMNf4V/v679y503Tr1s04HA7zxRdfGGPsrll5c1+JSlpDY4z5zW9+YzZs2FDiPqyhMTk5OaZjx45m3rx55uzZs+bEiRNm2LBh5g9/+APHoIfKWkNjOAZtuWZCyP79+43D4TA//fSTq+2DDz4wXbp0sViVHQMHDjSrVq0q1v7OO++Y++67z61t8uTJ5rnnnjPGGDN69Gjz/PPPu23/9a9/bdavX2+MMebuu+82f/3rX13bjh07ZiIiIszBgwev+vXfsGGD6dKli/nggw/cfoHaXLPy5r7SlLaGZ8+eNXfccYf57rvvStyPNTRm37595vHHHzf5+fmuti1btpjWrVtzDHqorDXkGLTnmrkck5qaqtDQUNWvX9/V1rRpUx05ckSnT5+2WFnVKiws1DfffKOtW7fqnnvu0d13361Jkybp1KlTSk1NlcPhcOt/2223ae/evZKktLS0UrdnZmbqp59+ctseFhamOnXq6Ntvv73q179Tp0766KOP1KNHD7d2m2tW3txXmtLWcO/evcrPz9f8+fPVoUMHde/eXa+//roKCwslsYaSdOutt2rZsmXy8/NztW3evFl33HEHx6CHylpDjkF7rpkQkp2drcDAQLe2otdnzpyxUZIVJ06cULNmzdS9e3clJiZqzZo12r9/vxISEkpco5o1a7rWp6zt2dnZkqSgoKBi27Ozs6/69a9Xr578/f2Ltdtcs/LmvtKUtoaZmZlq166dBg8erKSkJM2aNUtvvfWWli9fLok1vJgxRnPnztWnn36qiRMncgxWwMVryDFoT/E/EaqpoKAg5eTkuLUVvQ4ODrZRkhVhYWFavXq163VgYKASEhLUv39/9enTR7m5uW79c3NzXesTGBhY4va6deu6/iO6eI2L9jfGVMv1DwwMVGZmpltbVa1ZeXNfLTp27KiOHTu6Xrds2VKPPvqoEhMTNXToUNbwAllZWRo/fry++eYbrVq1ShERERyDXippDSMiIjgGLblmzoSEh4crIyND6enprrZ9+/apQYMGCgkJsVhZ1dq7d69mz54tY4yrLS8vT76+vmrZsqVSU1Pd+qelpSk8PFzS+TUsbXudOnVUv359paWlubYdO3ZMGRkZcjgc1Xb9HQ6HtTUrb+6rxZYtW7RmzRq3try8PNWsWVMSa1jk4MGD+u1vf6usrCytX79eERERkjgGvVHaGnIMWmTvdpSq9/DDD5uRI0eazMxM1x3K8+fPt11Wlfrvf/9rIiMjzeuvv27OnTtnfvzxR9O/f38zYcIEc+LECRMVFWVWrFhh8vLyzPbt243T6TTbt283xhjXXdvbt2933SHetm1bc/LkSWOMMXPnzjUPPvigOXjwoOsO8UGDBrnmri7rf+FNlTbXrLy5r2QXruH/+3//z7Rs2dJ8/vnnprCw0Hz11VcmOjravPfee8YY1tCY89+g6NKlixk3bpwpKChw28Yx6Jmy1pBj0J5rKoQcO3bMjBgxwrRr187ceeedZsaMGW53Sl8rkpOTzYABA4zT6TR33nmneemll0xubq4xxpivv/7ata1r167m3Xffddv3vffeM927dzeRkZGmb9++Zvfu3a5teXl5ZtasWeauu+4yrVu3NsOHDzfp6emu7dVl/S/+eqnNNStv7ivVxWv49ttvm/vuu8+0atXKdO3atdi3t671NVy+fLlxOBymVatWJjIy0u3HGI5BT5S3hhyDdvgYc8F5eQAAgCpyzdwTAgAAriyEEAAAYAUhBAAAWEEIAQAAVhBCAACAFYQQAABgBSEEAABYQQgBAABWEEIAAIAVhBAAAGAFIQQAAFjx/wG/fx9oBXm3tgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "TypeError",
     "evalue": "'value' must be an instance of str or bytes, not a float",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[124], line 6\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m j, col2 \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(df\u001b[38;5;241m.\u001b[39mcolumns):\n\u001b[0;32m      5\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m i \u001b[38;5;241m<\u001b[39m j:\n\u001b[1;32m----> 6\u001b[0m         plt\u001b[38;5;241m.\u001b[39mscatter(df[col1], df[col2])\n\u001b[0;32m      7\u001b[0m         plt\u001b[38;5;241m.\u001b[39mtitle(col1 \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m vs \u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;241m+\u001b[39m col2)\n\u001b[0;32m      8\u001b[0m         plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\pyplot.py:2862\u001b[0m, in \u001b[0;36mscatter\u001b[1;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[0;32m   2857\u001b[0m \u001b[38;5;129m@_copy_docstring_and_deprecators\u001b[39m(Axes\u001b[38;5;241m.\u001b[39mscatter)\n\u001b[0;32m   2858\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mscatter\u001b[39m(\n\u001b[0;32m   2859\u001b[0m         x, y, s\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, c\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, marker\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, cmap\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, norm\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   2860\u001b[0m         vmin\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, vmax\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, linewidths\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m,\n\u001b[0;32m   2861\u001b[0m         edgecolors\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, plotnonfinite\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m-> 2862\u001b[0m     __ret \u001b[38;5;241m=\u001b[39m gca()\u001b[38;5;241m.\u001b[39mscatter(\n\u001b[0;32m   2863\u001b[0m         x, y, s\u001b[38;5;241m=\u001b[39ms, c\u001b[38;5;241m=\u001b[39mc, marker\u001b[38;5;241m=\u001b[39mmarker, cmap\u001b[38;5;241m=\u001b[39mcmap, norm\u001b[38;5;241m=\u001b[39mnorm,\n\u001b[0;32m   2864\u001b[0m         vmin\u001b[38;5;241m=\u001b[39mvmin, vmax\u001b[38;5;241m=\u001b[39mvmax, alpha\u001b[38;5;241m=\u001b[39malpha, linewidths\u001b[38;5;241m=\u001b[39mlinewidths,\n\u001b[0;32m   2865\u001b[0m         edgecolors\u001b[38;5;241m=\u001b[39medgecolors, plotnonfinite\u001b[38;5;241m=\u001b[39mplotnonfinite,\n\u001b[0;32m   2866\u001b[0m         \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m({\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdata\u001b[39m\u001b[38;5;124m\"\u001b[39m: data} \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m {}), \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   2867\u001b[0m     sci(__ret)\n\u001b[0;32m   2868\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m __ret\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\__init__.py:1446\u001b[0m, in \u001b[0;36m_preprocess_data.<locals>.inner\u001b[1;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1443\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(func)\n\u001b[0;32m   1444\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minner\u001b[39m(ax, \u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m   1445\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m-> 1446\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m func(ax, \u001b[38;5;241m*\u001b[39m\u001b[38;5;28mmap\u001b[39m(sanitize_sequence, args), \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   1448\u001b[0m     bound \u001b[38;5;241m=\u001b[39m new_sig\u001b[38;5;241m.\u001b[39mbind(ax, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   1449\u001b[0m     auto_label \u001b[38;5;241m=\u001b[39m (bound\u001b[38;5;241m.\u001b[39marguments\u001b[38;5;241m.\u001b[39mget(label_namer)\n\u001b[0;32m   1450\u001b[0m                   \u001b[38;5;129;01mor\u001b[39;00m bound\u001b[38;5;241m.\u001b[39mkwargs\u001b[38;5;241m.\u001b[39mget(label_namer))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\axes\\_axes.py:4572\u001b[0m, in \u001b[0;36mAxes.scatter\u001b[1;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[0;32m   4462\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   4463\u001b[0m \u001b[38;5;124;03mA scatter plot of *y* vs. *x* with varying marker size and/or color.\u001b[39;00m\n\u001b[0;32m   4464\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   4569\u001b[0m \n\u001b[0;32m   4570\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   4571\u001b[0m \u001b[38;5;66;03m# Process **kwargs to handle aliases, conflicts with explicit kwargs:\u001b[39;00m\n\u001b[1;32m-> 4572\u001b[0m x, y \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_process_unit_info([(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mx\u001b[39m\u001b[38;5;124m\"\u001b[39m, x), (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124my\u001b[39m\u001b[38;5;124m\"\u001b[39m, y)], kwargs)\n\u001b[0;32m   4573\u001b[0m \u001b[38;5;66;03m# np.ma.ravel yields an ndarray, not a masked array,\u001b[39;00m\n\u001b[0;32m   4574\u001b[0m \u001b[38;5;66;03m# unless its argument is a masked array.\u001b[39;00m\n\u001b[0;32m   4575\u001b[0m x \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mma\u001b[38;5;241m.\u001b[39mravel(x)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\axes\\_base.py:2549\u001b[0m, in \u001b[0;36m_AxesBase._process_unit_info\u001b[1;34m(self, datasets, kwargs, convert)\u001b[0m\n\u001b[0;32m   2547\u001b[0m     \u001b[38;5;66;03m# Update from data if axis is already set but no unit is set yet.\u001b[39;00m\n\u001b[0;32m   2548\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m axis \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m axis\u001b[38;5;241m.\u001b[39mhave_units():\n\u001b[1;32m-> 2549\u001b[0m         axis\u001b[38;5;241m.\u001b[39mupdate_units(data)\n\u001b[0;32m   2550\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis_name, axis \u001b[38;5;129;01min\u001b[39;00m axis_map\u001b[38;5;241m.\u001b[39mitems():\n\u001b[0;32m   2551\u001b[0m     \u001b[38;5;66;03m# Return if no axis is set.\u001b[39;00m\n\u001b[0;32m   2552\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m axis \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\axis.py:1675\u001b[0m, in \u001b[0;36mAxis.update_units\u001b[1;34m(self, data)\u001b[0m\n\u001b[0;32m   1673\u001b[0m neednew \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconverter \u001b[38;5;241m!=\u001b[39m converter\n\u001b[0;32m   1674\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconverter \u001b[38;5;241m=\u001b[39m converter\n\u001b[1;32m-> 1675\u001b[0m default \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconverter\u001b[38;5;241m.\u001b[39mdefault_units(data, \u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m   1676\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m default \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39munits \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1677\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mset_units(default)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\category.py:105\u001b[0m, in \u001b[0;36mStrCategoryConverter.default_units\u001b[1;34m(data, axis)\u001b[0m\n\u001b[0;32m    103\u001b[0m \u001b[38;5;66;03m# the conversion call stack is default_units -> axis_info -> convert\u001b[39;00m\n\u001b[0;32m    104\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m axis\u001b[38;5;241m.\u001b[39munits \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 105\u001b[0m     axis\u001b[38;5;241m.\u001b[39mset_units(UnitData(data))\n\u001b[0;32m    106\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    107\u001b[0m     axis\u001b[38;5;241m.\u001b[39munits\u001b[38;5;241m.\u001b[39mupdate(data)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\category.py:181\u001b[0m, in \u001b[0;36mUnitData.__init__\u001b[1;34m(self, data)\u001b[0m\n\u001b[0;32m    179\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_counter \u001b[38;5;241m=\u001b[39m itertools\u001b[38;5;241m.\u001b[39mcount()\n\u001b[0;32m    180\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 181\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mupdate(data)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\category.py:216\u001b[0m, in \u001b[0;36mUnitData.update\u001b[1;34m(self, data)\u001b[0m\n\u001b[0;32m    213\u001b[0m convertible \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m    214\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m val \u001b[38;5;129;01min\u001b[39;00m OrderedDict\u001b[38;5;241m.\u001b[39mfromkeys(data):\n\u001b[0;32m    215\u001b[0m     \u001b[38;5;66;03m# OrderedDict just iterates over unique values in data.\u001b[39;00m\n\u001b[1;32m--> 216\u001b[0m     _api\u001b[38;5;241m.\u001b[39mcheck_isinstance((\u001b[38;5;28mstr\u001b[39m, \u001b[38;5;28mbytes\u001b[39m), value\u001b[38;5;241m=\u001b[39mval)\n\u001b[0;32m    217\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m convertible:\n\u001b[0;32m    218\u001b[0m         \u001b[38;5;66;03m# this will only be called so long as convertible is True.\u001b[39;00m\n\u001b[0;32m    219\u001b[0m         convertible \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_str_is_convertible(val)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\_api\\__init__.py:93\u001b[0m, in \u001b[0;36mcheck_isinstance\u001b[1;34m(_types, **kwargs)\u001b[0m\n\u001b[0;32m     91\u001b[0m     names\u001b[38;5;241m.\u001b[39mremove(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     92\u001b[0m     names\u001b[38;5;241m.\u001b[39mappend(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 93\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\n\u001b[0;32m     94\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{!r}\u001b[39;00m\u001b[38;5;124m must be an instance of \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m, not a \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[0;32m     95\u001b[0m         k,\n\u001b[0;32m     96\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin(names[:\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]) \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m or \u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m+\u001b[39m names[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\n\u001b[0;32m     97\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(names) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m names[\u001b[38;5;241m0\u001b[39m],\n\u001b[0;32m     98\u001b[0m         type_name(\u001b[38;5;28mtype\u001b[39m(v))))\n",
      "\u001b[1;31mTypeError\u001b[0m: 'value' must be an instance of str or bytes, not a float"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "for i, col1 in enumerate(df.columns):\n",
    "    for j, col2 in enumerate(df.columns):\n",
    "        if i < j:\n",
    "            plt.scatter(df[col1], df[col2])\n",
    "            plt.title(col1 + ' vs ' + col2)\n",
    "            plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "920eb058",
   "metadata": {},
   "outputs": [],
   "source": [
    "It imports the matplotlib.pyplot module as plt.\n",
    "It iterates over all pairs of columns in the DataFrame df using nested loops.\n",
    "For each pair of columns, it creates a scatter plot using plt.scatter(df[col1], df[col2]).\n",
    "It sets the title of the scatter plot to indicate which columns are being compared (plt.title(col1 + ' vs ' + col2)).\n",
    "Finally, it displays each scatter plot using plt.show().\n",
    "The purpose of this code is to visualize the relationship between different pairs of columns in the DataFrame df. Each scatter\n",
    "plot shows how the values of one column (on the x-axis) vary with the values of another column (on the y-axis). This \n",
    "visualization helps in understanding correlations or patterns between different variables in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "dad15c22",
   "metadata": {},
   "outputs": [],
   "source": [
    "FEATURE TRANSFORMATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "246f0b91",
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating a copy of original dataframe\n",
    "\n",
    "covid_df = df.copy(deep=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f338441b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Encoding\n",
    "\n",
    "covid_df['Cough_symptoms'] = pd.get_dummies(covid_df['Cough_symptoms'],drop_first=True)  # to aviod multicolinearity\n",
    "\n",
    "covid_df['Fever'] = pd.get_dummies(covid_df['Fever'],drop_first=True)\n",
    "\n",
    "covid_df['Sore_throat'] = pd.get_dummies(covid_df['Sore_throat'],drop_first=True)\n",
    "\n",
    "covid_df['Shortness_of_breath'] = pd.get_dummies(covid_df['Shortness_of_breath'],drop_first=True)\n",
    "\n",
    "covid_df['Headache'] = pd.get_dummies(covid_df['Headache'],drop_first=True)\n",
    "\n",
    "covid_df['Corona'] = pd.get_dummies(covid_df['Corona'],drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cb7ab4f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# encoding\n",
    "\n",
    "covid_df['Sex'].replace({'male':0,'female':1},inplace=True)\n",
    "covid_df['Known_contact'].replace({'Other':2,'Contact with confirmed':1,'Abroad':0},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "10d22f29",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4 entries, 0 to 3\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   feature1  4 non-null      float64\n",
      " 1   feature2  4 non-null      int64  \n",
      " 2   target    4 non-null      int64  \n",
      "dtypes: float64(1), int64(2)\n",
      "memory usage: 228.0 bytes\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Print dataframe info  \n",
    "print(df.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "45d7519b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ind_ID                     0\n",
      "Test_date                  0\n",
      "Cough                      0\n",
      "Fever                      0\n",
      "Sore_throat                0\n",
      "Shortness_of_breath        0\n",
      "Headache                   0\n",
      "Corona                     0\n",
      "Sex                    19030\n",
      "Known_contact              0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    " \n",
    "\n",
    "print(covid_df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2f2300f",
   "metadata": {},
   "outputs": [],
   "source": [
    "MISSING VALUES IMPUTATION , ENCODING  AND KNN IMPUTATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f5b31bce",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.impute import KNNImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b0799451",
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating a copy of original dataframe\n",
    "\n",
    "imputed_data = covid_df.copy(deep=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e4387855",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import KNNImputer\n",
    "from sklearn.impute import KNNImputer\n",
    "\n",
    "# Column indices to impute\n",
    "cols = [2, 3, 4, 5, 6, 8, 9] \n",
    "\n",
    "# Create imputer \n",
    "knn = KNNImputer(n_neighbors=5, weights='uniform')\n",
    "\n",
    "# Transform data\n",
    "imputed = knn.fit_transform(covid_df.iloc[:, cols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42f708ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# applying KNN imputation\n",
    "\n",
    "knn=KNNImputer(n_neighbors=5,weights='uniform')\n",
    "columns=['Cough_symptoms', 'Fever', 'Sore_throat','Shortness_of_breath', 'Headache','Sex','Known_contact']\n",
    "imputed=knn.fit_transform(covid_df[columns])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "54862e71",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.DataFrame(imputed,columns=columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "78e400e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def change(x):\n",
    "    if x>0.5:\n",
    "        return 1\n",
    "    elif x<0.5:\n",
    "        return 0\n",
    "    else:\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "48439a70",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1['Sex'] = df1['Sex'].apply(change)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "59b2ea95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Sex\n",
      "0    0\n",
      "1    0\n",
      "2    0\n",
      "3    0\n",
      "4    0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Sample dataframe \n",
    "imputed_data = pd.DataFrame({'Sex': [1, 2, np.nan, 1, 0]})\n",
    "\n",
    "# Replace all values with 0\n",
    "imputed_data['Sex'] = 0\n",
    "\n",
    "print(imputed_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3a63e0f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sex\n",
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    0\n",
       "4    0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputed_data.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5021523c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5 entries, 0 to 4\n",
      "Data columns (total 1 columns):\n",
      " #   Column  Non-Null Count  Dtype\n",
      "---  ------  --------------  -----\n",
      " 0   Sex     5 non-null      int64\n",
      "dtypes: int64(1)\n",
      "memory usage: 172.0 bytes\n"
     ]
    }
   ],
   "source": [
    "imputed_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "557b30ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sex\n",
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    0\n",
       "4    0"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputed_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "ca70e126",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5 entries, 0 to 4\n",
      "Data columns (total 1 columns):\n",
      " #   Column  Non-Null Count  Dtype\n",
      "---  ------  --------------  -----\n",
      " 0   Sex     5 non-null      uint8\n",
      "dtypes: uint8(1)\n",
      "memory usage: 137.0 bytes\n"
     ]
    }
   ],
   "source": [
    "imputed_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9cd250de",
   "metadata": {},
   "outputs": [],
   "source": [
    "imputed_data['Sex'] = imputed_data['Sex'].astype('uint8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e30cca41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# strong teh data in final df\n",
    "\n",
    "final_data = imputed_data.astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "2de55e2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Cough_symptoms  Fever  Sore_throat  Shortness_of_breath  Headache  \\\n",
      "0                1      0            0                    0         0   \n",
      "1                1      0            0                    0         0   \n",
      "2                0      1            0                    0         0   \n",
      "3                0      1            0                    0         0   \n",
      "4                0      0            1                    0         1   \n",
      "..             ...    ...          ...                  ...       ...   \n",
      "95               1      1            1                    0         0   \n",
      "96               1      0            1                    1         0   \n",
      "97               1      0            1                    0         0   \n",
      "98               0      1            1                    0         1   \n",
      "99               1      1            0                    1         1   \n",
      "\n",
      "    Known_contact  \n",
      "0               0  \n",
      "1               0  \n",
      "2               1  \n",
      "3               0  \n",
      "4               1  \n",
      "..            ...  \n",
      "95              1  \n",
      "96              0  \n",
      "97              1  \n",
      "98              0  \n",
      "99              0  \n",
      "\n",
      "[100 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Create empty dataframe\n",
    "df = pd.DataFrame() \n",
    "\n",
    "# Columns \n",
    "cols = ['Cough_symptoms', 'Fever', 'Sore_throat', 'Shortness_of_breath', 'Headache', 'Known_contact']\n",
    "\n",
    "# Add columns to dataframe\n",
    "for col in cols:\n",
    "    df[col] = np.random.randint(0,2,100)\n",
    "    \n",
    "# Display dataframe \n",
    "print(df.head(100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "63ef433f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 274702 entries, 0 to 274701\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count   Dtype \n",
      "---  ------               --------------   ----- \n",
      " 0   Ind_ID               274702 non-null  int64 \n",
      " 1   Test_date            274702 non-null  object\n",
      " 2   Cough_symptoms       274702 non-null  int64 \n",
      " 3   Fever                274702 non-null  int64 \n",
      " 4   Sore_throat          274702 non-null  int64 \n",
      " 5   Shortness_of_breath  274702 non-null  int64 \n",
      " 6   Headache             274702 non-null  int64 \n",
      " 7   Corona               274702 non-null  int64 \n",
      " 8   Sex                  274702 non-null  int64 \n",
      " 9   Known_contact        274702 non-null  int64 \n",
      "dtypes: int64(9), object(1)\n",
      "memory usage: 21.0+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Print dataframe info  \n",
    "print(df.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5812c356",
   "metadata": {},
   "outputs": [],
   "source": [
    "imputed_data['Sex'] = imputed_data['Sex'].astype('uint8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "fdf37618",
   "metadata": {},
   "outputs": [],
   "source": [
    "# strong teh data in final df\n",
    "\n",
    "final_data = imputed_data.astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "3ae50a34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 274702 entries, 0 to 274701\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count   Dtype   \n",
      "---  ------               --------------   -----   \n",
      " 0   Ind_ID               274702 non-null  category\n",
      " 1   Test_date            274702 non-null  category\n",
      " 2   Cough_symptoms       274702 non-null  category\n",
      " 3   Fever                274702 non-null  category\n",
      " 4   Sore_throat          274702 non-null  category\n",
      " 5   Shortness_of_breath  274702 non-null  category\n",
      " 6   Headache             274702 non-null  category\n",
      " 7   Corona               274702 non-null  category\n",
      " 8   Sex                  274702 non-null  category\n",
      " 9   Known_contact        274702 non-null  category\n",
      "dtypes: category(10)\n",
      "memory usage: 13.6 MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Change dtypes to category\n",
    "df = pd.DataFrame(data).astype('category') \n",
    "\n",
    "# Print dataframe info\n",
    "print(df.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "36686963",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Patient_ID  Age  Gender Test_Result\n",
      "0           1   30    Male    Positive\n",
      "1           2   45  Female    Negative\n",
      "2           3   50    Male    Positive\n",
      "3           4   25  Female    Negative\n",
      "4           5   60    Male    Positive\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5 entries, 0 to 4\n",
      "Data columns (total 4 columns):\n",
      " #   Column       Non-Null Count  Dtype \n",
      "---  ------       --------------  ----- \n",
      " 0   Patient_ID   5 non-null      int64 \n",
      " 1   Age          5 non-null      int64 \n",
      " 2   Gender       5 non-null      object\n",
      " 3   Test_Result  5 non-null      object\n",
      "dtypes: int64(2), object(2)\n",
      "memory usage: 292.0+ bytes\n",
      "None\n",
      "       Patient_ID       Age\n",
      "count    5.000000   5.00000\n",
      "mean     3.000000  42.00000\n",
      "std      1.581139  14.40486\n",
      "min      1.000000  25.00000\n",
      "25%      2.000000  30.00000\n",
      "50%      3.000000  45.00000\n",
      "75%      4.000000  50.00000\n",
      "max      5.000000  60.00000\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'column_name'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3653\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3652\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3653\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3654\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\_libs\\index.pyx:147\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\_libs\\index.pyx:176\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:7080\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:7088\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'column_name'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[19], line 13\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[38;5;28mprint\u001b[39m(data\u001b[38;5;241m.\u001b[39mdescribe())\n\u001b[0;32m     12\u001b[0m \u001b[38;5;66;03m# Accessing specific columns\u001b[39;00m\n\u001b[1;32m---> 13\u001b[0m \u001b[38;5;28mprint\u001b[39m(data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcolumn_name\u001b[39m\u001b[38;5;124m'\u001b[39m])  \u001b[38;5;66;03m# Replace 'column_name' with the actual name of the column\u001b[39;00m\n\u001b[0;32m     15\u001b[0m \u001b[38;5;66;03m# Filtering data based on conditions\u001b[39;00m\n\u001b[0;32m     16\u001b[0m filtered_data \u001b[38;5;241m=\u001b[39m data[data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcolumn_name\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m>\u001b[39m threshold]  \u001b[38;5;66;03m# Replace 'column_name' and 'threshold' with actual values\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:3761\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3759\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   3760\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 3761\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mget_loc(key)\n\u001b[0;32m   3762\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   3763\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3655\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3653\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3654\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m-> 3655\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3656\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3657\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3658\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3659\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3660\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'column_name'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Display the first few rows of the DataFrame\n",
    "print(data.head())\n",
    "\n",
    "# Get some basic information about the DataFrame\n",
    "print(data.info())\n",
    "\n",
    "# Summary statistics of numerical columns\n",
    "print(data.describe())\n",
    "\n",
    "# Accessing specific columns\n",
    "print(data['column_name'])  # Replace 'column_name' with the actual name of the column\n",
    "\n",
    "# Filtering data based on conditions\n",
    "filtered_data = data[data['column_name'] > threshold]  # Replace 'column_name' and 'threshold' with actual values\n",
    "\n",
    "# Grouping data and performing aggregations\n",
    "grouped_data = data.groupby('column_name').agg({'another_column': 'mean'})  # Replace 'column_name' and 'another_column' with actual names\n",
    "\n",
    "# Handling missing values\n",
    "clean_data = data.dropna()  # Drop rows with missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0eea895",
   "metadata": {},
   "outputs": [],
   "source": [
    "FEATURE ENGINEERING                 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e234b04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# separating features and target variable\n",
    "\n",
    "features = final_data.drop(['Ind_ID','Test_date','Corona'],axis=1)\n",
    "\n",
    "target = final_data['Corona']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "26d89779",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import chi2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "60cca4ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Cough_symptoms', 'Fever', 'Sore_throat', 'Shortness_of_breath',\n",
      "       'Headache', 'Known_contact'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "columns = ['Cough_symptoms', 'Fever', 'Sore_throat', 'Shortness_of_breath', \n",
    "           'Headache', 'Known_contact']\n",
    "\n",
    "index = pd.Index(columns)\n",
    "\n",
    "print(index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bedc6288",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "This shows covid symptoms are the important features of the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "c122b169",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Cough_symptoms      Fever  Sore_throat  Shortness_of_breath   Headache  \\\n",
      "count       10.000000  10.000000    10.000000            10.000000  10.000000   \n",
      "mean         0.500000   0.500000     0.500000             0.300000   0.700000   \n",
      "std          0.527046   0.527046     0.527046             0.483046   0.483046   \n",
      "min          0.000000   0.000000     0.000000             0.000000   0.000000   \n",
      "25%          0.000000   0.000000     0.000000             0.000000   0.250000   \n",
      "50%          0.500000   0.500000     0.500000             0.000000   1.000000   \n",
      "75%          1.000000   1.000000     1.000000             0.750000   1.000000   \n",
      "max          1.000000   1.000000     1.000000             1.000000   1.000000   \n",
      "\n",
      "       Known_contact  \n",
      "count      10.000000  \n",
      "mean        0.500000  \n",
      "std         0.527046  \n",
      "min         0.000000  \n",
      "25%         0.000000  \n",
      "50%         0.500000  \n",
      "75%         1.000000  \n",
      "max         1.000000  \n",
      "Cough_symptoms         0\n",
      "Fever                  0\n",
      "Sore_throat            0\n",
      "Shortness_of_breath    0\n",
      "Headache               0\n",
      "Known_contact          0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Statistics on features \n",
    "print(df.describe())\n",
    "\n",
    "# Check for null values\n",
    "print(df.isnull().sum())\n",
    "\n",
    "# Visualizations, correlations etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "e8cab5b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "FEATURES = ['Cough_symptoms', 'Fever', 'Sore_throat', 'Shortness_of_breath',\n",
    "            'Headache', 'Known_contact']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "ec1570ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Cough_symptoms  Fever  Sore_throat  Shortness_of_breath  Headache  \\\n",
      "0               1      0            0                    0         1   \n",
      "1               0      1            1                    0         1   \n",
      "2               1      0            0                    1         1   \n",
      "3               0      0            0                    0         0   \n",
      "4               1      0            1                    0         1   \n",
      "5               0      1            0                    0         1   \n",
      "6               0      0            1                    0         0   \n",
      "7               1      1            1                    1         1   \n",
      "8               0      1            1                    1         1   \n",
      "9               1      1            0                    0         0   \n",
      "\n",
      "   Known_contact  \n",
      "0              0  \n",
      "1              1  \n",
      "2              1  \n",
      "3              0  \n",
      "4              0  \n",
      "5              1  \n",
      "6              1  \n",
      "7              0  \n",
      "8              0  \n",
      "9              1  \n"
     ]
    }
   ],
   "source": [
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Assume df is your DataFrame\n",
    "df = pd.DataFrame(np.random.randint(0, 2, size=(10, len(FEATURES))), columns=FEATURES)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "47e3e7e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    'feature_1': [0.1, 0.2, 0.3, 0.4, 0.5], \n",
    "    'feature_2': [1, 2, 3, 4, 5],\n",
    "    'target': [1, 0, 1, 0, 1]\n",
    "})\n",
    "\n",
    "features = df[['feature_1', 'feature_2']] \n",
    "target = df['target']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "7cce14c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Corona\n",
      "0    54632\n",
      "1     3055\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Split data into train and test sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(df, df['Corona'], test_size=0.3, random_state=42)\n",
    "\n",
    "# Print value counts for y_train\n",
    "print(y_train.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "05d1e765",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Corona\n",
      "0    127341\n",
      "1      7262\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Split data into train and test sets \n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(df, df['Corona'], test_size=0.3, random_state=42)\n",
    "\n",
    "# Print value counts for y_train\n",
    "print(y_train.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3323b9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "MODEL TRAINING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b4f6a56",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.impute import KNNImputer\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "78f7ddeb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dell\\AppData\\Local\\Temp\\ipykernel_11196\\3103726082.py:12: DtypeWarning: Columns (2,3,4,5,6,8) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df = pd.read_csv(f)\n"
     ]
    }
   ],
   "source": [
    "import zipfile\n",
    "import pandas as pd\n",
    "\n",
    "# Open the zip file\n",
    "with zipfile.ZipFile(\"CAP+Project+2+-+corona_tested_006.zip\") as z:\n",
    "    # Get the information of all files \n",
    "    for info in z.infolist():\n",
    "        # Extract the file\n",
    "        with z.open(info) as f:\n",
    "            # If it's a CSV file, read it into a Pandas DataFrame\n",
    "            if info.filename.endswith('.csv'):\n",
    "                df = pd.read_csv(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "34a79534",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Ind_ID   Test_date Cough_symptoms  Fever Sore_throat Shortness_of_breath  \\\n",
      "0       1  11-03-2020           True  False        True               False   \n",
      "1       2  11-03-2020          False   True       False               False   \n",
      "2       3  11-03-2020          False   True       False               False   \n",
      "3       4  11-03-2020           True  False       False               False   \n",
      "4       5  11-03-2020           True  False       False               False   \n",
      "\n",
      "  Headache    Corona Age_60_above  Sex           Known_contact  \n",
      "0    False  negative          NaN  NaN                  Abroad  \n",
      "1    False  positive          NaN  NaN                  Abroad  \n",
      "2    False  positive          NaN  NaN                  Abroad  \n",
      "3    False  negative          NaN  NaN                  Abroad  \n",
      "4    False  negative          NaN  NaN  Contact with confirmed  \n"
     ]
    }
   ],
   "source": [
    " print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d809f46e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-03-11 00:00:00\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "date_string = \"11-03-2020\"\n",
    "date_format = \"%d-%m-%Y\"\n",
    "\n",
    "try:\n",
    "    parsed_date = datetime.strptime(date_string, date_format)\n",
    "    print(parsed_date)\n",
    "except ValueError:\n",
    "    print(\"Date string doesn't match the specified format.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9bbc139",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Impute missing values\n",
    "imputer = KNNImputer()\n",
    "df_imputed = pd.DataFrame(imputer.fit_transform(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8c783e5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "df = pd.DataFrame({'feature1': [1, 2, 3], 'feature2': [4, 5, 6], 'target': [7, 8, 9]}) \n",
    "\n",
    "X = df.drop('target', axis=1)\n",
    "y = df['target']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c2f807fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Train model (e.g. Random Forest)\n",
    "model = RandomForestClassifier()\n",
    "model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b05005f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:96.75164723155889\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "X = df.drop('target', axis=1) \n",
    "y = df['target']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train model, make predictions, calculate accuracy (code not shown)\n",
    "\n",
    "\n",
    "\n",
    "print(\"Accuracy:, accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47daafa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "RANDOM FOREST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "595a942d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "72012d20",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dell\\AppData\\Local\\Temp\\ipykernel_7336\\3103726082.py:12: DtypeWarning: Columns (2,3,4,5,6,8) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df = pd.read_csv(f)\n"
     ]
    }
   ],
   "source": [
    "import zipfile\n",
    "import pandas as pd\n",
    "\n",
    "# Open the zip file\n",
    "with zipfile.ZipFile(\"CAP+Project+2+-+corona_tested_006.zip\") as z:\n",
    "    # Get the information of all files \n",
    "    for info in z.infolist():\n",
    "        # Extract the file\n",
    "        with z.open(info) as f:\n",
    "            # If it's a CSV file, read it into a Pandas DataFrame\n",
    "            if info.filename.endswith('.csv'):\n",
    "                df = pd.read_csv(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e2b8e78d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Ind_ID   Test_date Cough_symptoms  Fever Sore_throat Shortness_of_breath  \\\n",
      "0       1  11-03-2020           True  False        True               False   \n",
      "1       2  11-03-2020          False   True       False               False   \n",
      "2       3  11-03-2020          False   True       False               False   \n",
      "3       4  11-03-2020           True  False       False               False   \n",
      "4       5  11-03-2020           True  False       False               False   \n",
      "\n",
      "  Headache    Corona Age_60_above  Sex           Known_contact  \n",
      "0    False  negative          NaN  NaN                  Abroad  \n",
      "1    False  positive          NaN  NaN                  Abroad  \n",
      "2    False  positive          NaN  NaN                  Abroad  \n",
      "3    False  negative          NaN  NaN                  Abroad  \n",
      "4    False  negative          NaN  NaN  Contact with confirmed  \n"
     ]
    }
   ],
   "source": [
    " print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dc39bbf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "df = pd.DataFrame({'feature1': [1, 2, 3], 'feature2': [4, 5, 6], 'target': [7, 8, 9]}) \n",
    "\n",
    "X = df.drop('target', axis=1)\n",
    "y = df['target']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "551cea7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Train a Random Forest model\n",
    "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "rf.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3108fc82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 96.75164723155889\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split original data \n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Split X_train and y_train into training and validation sets\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train model on new X_train and y_train\n",
    "rf = RandomForestClassifier()\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8ed8c62b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dell\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:464: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "X has 6 features, but RandomForestClassifier is expecting 2 features as input.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[23], line 9\u001b[0m\n\u001b[0;32m      6\u001b[0m new_data \u001b[38;5;241m=\u001b[39m [[\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m0\u001b[39m]] \n\u001b[0;32m      8\u001b[0m \u001b[38;5;66;03m# Make prediction\u001b[39;00m\n\u001b[1;32m----> 9\u001b[0m prediction \u001b[38;5;241m=\u001b[39m rf\u001b[38;5;241m.\u001b[39mpredict(new_data)\n\u001b[0;32m     11\u001b[0m \u001b[38;5;28mprint\u001b[39m(prediction)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\ensemble\\_forest.py:823\u001b[0m, in \u001b[0;36mForestClassifier.predict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    802\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpredict\u001b[39m(\u001b[38;5;28mself\u001b[39m, X):\n\u001b[0;32m    803\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    804\u001b[0m \u001b[38;5;124;03m    Predict class for X.\u001b[39;00m\n\u001b[0;32m    805\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    821\u001b[0m \u001b[38;5;124;03m        The predicted classes.\u001b[39;00m\n\u001b[0;32m    822\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 823\u001b[0m     proba \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpredict_proba(X)\n\u001b[0;32m    825\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_outputs_ \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    826\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclasses_\u001b[38;5;241m.\u001b[39mtake(np\u001b[38;5;241m.\u001b[39margmax(proba, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m), axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\ensemble\\_forest.py:865\u001b[0m, in \u001b[0;36mForestClassifier.predict_proba\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    863\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m    864\u001b[0m \u001b[38;5;66;03m# Check data\u001b[39;00m\n\u001b[1;32m--> 865\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_X_predict(X)\n\u001b[0;32m    867\u001b[0m \u001b[38;5;66;03m# Assign chunk of trees to jobs\u001b[39;00m\n\u001b[0;32m    868\u001b[0m n_jobs, _, _ \u001b[38;5;241m=\u001b[39m _partition_estimators(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_estimators, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\ensemble\\_forest.py:599\u001b[0m, in \u001b[0;36mBaseForest._validate_X_predict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    596\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    597\u001b[0m \u001b[38;5;124;03mValidate X whenever one tries to predict, apply, predict_proba.\"\"\"\u001b[39;00m\n\u001b[0;32m    598\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[1;32m--> 599\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_data(X, dtype\u001b[38;5;241m=\u001b[39mDTYPE, accept_sparse\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcsr\u001b[39m\u001b[38;5;124m\"\u001b[39m, reset\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[0;32m    600\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m issparse(X) \u001b[38;5;129;01mand\u001b[39;00m (X\u001b[38;5;241m.\u001b[39mindices\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc \u001b[38;5;129;01mor\u001b[39;00m X\u001b[38;5;241m.\u001b[39mindptr\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc):\n\u001b[0;32m    601\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo support for np.int64 index based sparse matrices\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:625\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[1;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001b[0m\n\u001b[0;32m    622\u001b[0m     out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[0;32m    624\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m check_params\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mensure_2d\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[1;32m--> 625\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_n_features(X, reset\u001b[38;5;241m=\u001b[39mreset)\n\u001b[0;32m    627\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m out\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:414\u001b[0m, in \u001b[0;36mBaseEstimator._check_n_features\u001b[1;34m(self, X, reset)\u001b[0m\n\u001b[0;32m    411\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[0;32m    413\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m n_features \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_features_in_:\n\u001b[1;32m--> 414\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    415\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX has \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mn_features\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m features, but \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    416\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mis expecting \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_features_in_\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m features as input.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    417\u001b[0m     )\n",
      "\u001b[1;31mValueError\u001b[0m: X has 6 features, but RandomForestClassifier is expecting 2 features as input."
     ]
    }
   ],
   "source": [
    "# Train model \n",
    "rf = RandomForestClassifier()\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# New data point \n",
    "new_data = [[1, 0, 1, 0, 1, 0]] \n",
    "\n",
    "# Make prediction\n",
    "prediction = rf.predict(new_data)\n",
    "\n",
    "print(prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ed0a6e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "HYPER PARAMETER TUNING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16874818",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f3dd78c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "# Rest of code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5c981133",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Cannot have number of splits n_splits=5 greater than the number of samples: n_samples=3.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[30], line 27\u001b[0m\n\u001b[0;32m     18\u001b[0m rf_search \u001b[38;5;241m=\u001b[39m RandomizedSearchCV(\n\u001b[0;32m     19\u001b[0m     RandomForestClassifier(),\n\u001b[0;32m     20\u001b[0m     rf_grid,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     23\u001b[0m     scoring\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m     24\u001b[0m )\n\u001b[0;32m     26\u001b[0m \u001b[38;5;66;03m# Fit on data\u001b[39;00m\n\u001b[1;32m---> 27\u001b[0m rf_search\u001b[38;5;241m.\u001b[39mfit(X, y)\n\u001b[0;32m     29\u001b[0m \u001b[38;5;66;03m# Get best hyperparameters \u001b[39;00m\n\u001b[0;32m     30\u001b[0m \u001b[38;5;28mprint\u001b[39m(rf_search\u001b[38;5;241m.\u001b[39mbest_params_)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:1151\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1144\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m   1146\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m   1147\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m   1148\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1149\u001b[0m     )\n\u001b[0;32m   1150\u001b[0m ):\n\u001b[1;32m-> 1151\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fit_method(estimator, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_search.py:898\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[1;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[0;32m    892\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[0;32m    893\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[0;32m    894\u001b[0m     )\n\u001b[0;32m    896\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[1;32m--> 898\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run_search(evaluate_candidates)\n\u001b[0;32m    900\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[0;32m    901\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[0;32m    902\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_search.py:1806\u001b[0m, in \u001b[0;36mRandomizedSearchCV._run_search\u001b[1;34m(self, evaluate_candidates)\u001b[0m\n\u001b[0;32m   1804\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[0;32m   1805\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Search n_iter candidates from param_distributions\"\"\"\u001b[39;00m\n\u001b[1;32m-> 1806\u001b[0m     evaluate_candidates(\n\u001b[0;32m   1807\u001b[0m         ParameterSampler(\n\u001b[0;32m   1808\u001b[0m             \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mparam_distributions, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_iter, random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrandom_state\n\u001b[0;32m   1809\u001b[0m         )\n\u001b[0;32m   1810\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_search.py:857\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[1;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[0;32m    837\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m    838\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\n\u001b[0;32m    839\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFitting \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m folds for each of \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m candidates,\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    840\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m totalling \u001b[39m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[0;32m    841\u001b[0m             n_splits, n_candidates, n_candidates \u001b[38;5;241m*\u001b[39m n_splits\n\u001b[0;32m    842\u001b[0m         )\n\u001b[0;32m    843\u001b[0m     )\n\u001b[0;32m    845\u001b[0m out \u001b[38;5;241m=\u001b[39m parallel(\n\u001b[0;32m    846\u001b[0m     delayed(_fit_and_score)(\n\u001b[0;32m    847\u001b[0m         clone(base_estimator),\n\u001b[0;32m    848\u001b[0m         X,\n\u001b[0;32m    849\u001b[0m         y,\n\u001b[0;32m    850\u001b[0m         train\u001b[38;5;241m=\u001b[39mtrain,\n\u001b[0;32m    851\u001b[0m         test\u001b[38;5;241m=\u001b[39mtest,\n\u001b[0;32m    852\u001b[0m         parameters\u001b[38;5;241m=\u001b[39mparameters,\n\u001b[0;32m    853\u001b[0m         split_progress\u001b[38;5;241m=\u001b[39m(split_idx, n_splits),\n\u001b[0;32m    854\u001b[0m         candidate_progress\u001b[38;5;241m=\u001b[39m(cand_idx, n_candidates),\n\u001b[0;32m    855\u001b[0m         \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_and_score_kwargs,\n\u001b[0;32m    856\u001b[0m     )\n\u001b[1;32m--> 857\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m (cand_idx, parameters), (split_idx, (train, test)) \u001b[38;5;129;01min\u001b[39;00m product(\n\u001b[0;32m    858\u001b[0m         \u001b[38;5;28menumerate\u001b[39m(candidate_params), \u001b[38;5;28menumerate\u001b[39m(cv\u001b[38;5;241m.\u001b[39msplit(X, y, groups))\n\u001b[0;32m    859\u001b[0m     )\n\u001b[0;32m    860\u001b[0m )\n\u001b[0;32m    862\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    863\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    864\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo fits were performed. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    865\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWas the CV iterator empty? \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    866\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWere there no candidates?\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    867\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:370\u001b[0m, in \u001b[0;36m_BaseKFold.split\u001b[1;34m(self, X, y, groups)\u001b[0m\n\u001b[0;32m    368\u001b[0m n_samples \u001b[38;5;241m=\u001b[39m _num_samples(X)\n\u001b[0;32m    369\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_splits \u001b[38;5;241m>\u001b[39m n_samples:\n\u001b[1;32m--> 370\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    371\u001b[0m         (\n\u001b[0;32m    372\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCannot have number of splits n_splits=\u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m greater\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    373\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m than the number of samples: n_samples=\u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    374\u001b[0m         )\u001b[38;5;241m.\u001b[39mformat(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_splits, n_samples)\n\u001b[0;32m    375\u001b[0m     )\n\u001b[0;32m    377\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m train, test \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39msplit(X, y, groups):\n\u001b[0;32m    378\u001b[0m     \u001b[38;5;28;01myield\u001b[39;00m train, test\n",
      "\u001b[1;31mValueError\u001b[0m: Cannot have number of splits n_splits=5 greater than the number of samples: n_samples=3."
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "\n",
    "\n",
    "X = df.drop('target', axis=1) \n",
    "y = df['target']\n",
    "\n",
    "# Define hyperparameter grid\n",
    "rf_grid = {\n",
    "    'n_estimators': [100, 200, 500],\n",
    "    'max_depth': [5, 8, 15],\n",
    "    'min_samples_split': [2, 5, 10]\n",
    "}\n",
    "\n",
    "# Set up RandomizedSearchCV \n",
    "rf_search = RandomizedSearchCV(\n",
    "    RandomForestClassifier(),\n",
    "    rf_grid,\n",
    "    n_jobs=-1,\n",
    "    cv=5,\n",
    "    scoring='accuracy'\n",
    ")\n",
    "\n",
    "# Fit on data\n",
    "rf_search.fit(X, y)\n",
    "\n",
    "# Get best hyperparameters \n",
    "print(rf_search.best_params_)\n",
    "\n",
    "# Refit on whole dataset\n",
    "rf_best = RandomForestClassifier(**rf_search.best_params_)\n",
    "rf_best.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b73e2be",
   "metadata": {},
   "outputs": [],
   "source": [
    "ACCURACY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d9425fc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ff317e96",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "pos_label=1 is not a valid label. It should be one of [7, 8]",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[36], line 8\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;66;03m# Calculate metrics\u001b[39;00m\n\u001b[0;32m      7\u001b[0m accuracy \u001b[38;5;241m=\u001b[39m accuracy_score(y_test, y_pred)\n\u001b[1;32m----> 8\u001b[0m precision \u001b[38;5;241m=\u001b[39m precision_score(y_test, y_pred)\n\u001b[0;32m      9\u001b[0m recall \u001b[38;5;241m=\u001b[39m recall_score(y_test, y_pred)\n\u001b[0;32m     10\u001b[0m f1 \u001b[38;5;241m=\u001b[39m f1_score(y_test, y_pred)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\_param_validation.py:211\u001b[0m, in \u001b[0;36mvalidate_params.<locals>.decorator.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    205\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    206\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m    207\u001b[0m         skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m    208\u001b[0m             prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m    209\u001b[0m         )\n\u001b[0;32m    210\u001b[0m     ):\n\u001b[1;32m--> 211\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    212\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m InvalidParameterError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    213\u001b[0m     \u001b[38;5;66;03m# When the function is just a wrapper around an estimator, we allow\u001b[39;00m\n\u001b[0;32m    214\u001b[0m     \u001b[38;5;66;03m# the function to delegate validation to the estimator, but we replace\u001b[39;00m\n\u001b[0;32m    215\u001b[0m     \u001b[38;5;66;03m# the name of the estimator by the name of the function in the error\u001b[39;00m\n\u001b[0;32m    216\u001b[0m     \u001b[38;5;66;03m# message to avoid confusion.\u001b[39;00m\n\u001b[0;32m    217\u001b[0m     msg \u001b[38;5;241m=\u001b[39m re\u001b[38;5;241m.\u001b[39msub(\n\u001b[0;32m    218\u001b[0m         \u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mw+ must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    219\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfunc\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__qualname__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    220\u001b[0m         \u001b[38;5;28mstr\u001b[39m(e),\n\u001b[0;32m    221\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:2127\u001b[0m, in \u001b[0;36mprecision_score\u001b[1;34m(y_true, y_pred, labels, pos_label, average, sample_weight, zero_division)\u001b[0m\n\u001b[0;32m   1970\u001b[0m \u001b[38;5;129m@validate_params\u001b[39m(\n\u001b[0;32m   1971\u001b[0m     {\n\u001b[0;32m   1972\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124my_true\u001b[39m\u001b[38;5;124m\"\u001b[39m: [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124marray-like\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msparse matrix\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1996\u001b[0m     zero_division\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwarn\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   1997\u001b[0m ):\n\u001b[0;32m   1998\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Compute the precision.\u001b[39;00m\n\u001b[0;32m   1999\u001b[0m \n\u001b[0;32m   2000\u001b[0m \u001b[38;5;124;03m    The precision is the ratio ``tp / (tp + fp)`` where ``tp`` is the number of\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   2125\u001b[0m \u001b[38;5;124;03m    array([0.5, 1. , 1. ])\u001b[39;00m\n\u001b[0;32m   2126\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 2127\u001b[0m     p, _, _, _ \u001b[38;5;241m=\u001b[39m precision_recall_fscore_support(\n\u001b[0;32m   2128\u001b[0m         y_true,\n\u001b[0;32m   2129\u001b[0m         y_pred,\n\u001b[0;32m   2130\u001b[0m         labels\u001b[38;5;241m=\u001b[39mlabels,\n\u001b[0;32m   2131\u001b[0m         pos_label\u001b[38;5;241m=\u001b[39mpos_label,\n\u001b[0;32m   2132\u001b[0m         average\u001b[38;5;241m=\u001b[39maverage,\n\u001b[0;32m   2133\u001b[0m         warn_for\u001b[38;5;241m=\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mprecision\u001b[39m\u001b[38;5;124m\"\u001b[39m,),\n\u001b[0;32m   2134\u001b[0m         sample_weight\u001b[38;5;241m=\u001b[39msample_weight,\n\u001b[0;32m   2135\u001b[0m         zero_division\u001b[38;5;241m=\u001b[39mzero_division,\n\u001b[0;32m   2136\u001b[0m     )\n\u001b[0;32m   2137\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m p\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\_param_validation.py:184\u001b[0m, in \u001b[0;36mvalidate_params.<locals>.decorator.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    182\u001b[0m global_skip_validation \u001b[38;5;241m=\u001b[39m get_config()[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mskip_parameter_validation\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m    183\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m global_skip_validation:\n\u001b[1;32m--> 184\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    186\u001b[0m func_sig \u001b[38;5;241m=\u001b[39m signature(func)\n\u001b[0;32m    188\u001b[0m \u001b[38;5;66;03m# Map *args/**kwargs to the function signature\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1721\u001b[0m, in \u001b[0;36mprecision_recall_fscore_support\u001b[1;34m(y_true, y_pred, beta, labels, pos_label, average, warn_for, sample_weight, zero_division)\u001b[0m\n\u001b[0;32m   1563\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Compute precision, recall, F-measure and support for each class.\u001b[39;00m\n\u001b[0;32m   1564\u001b[0m \n\u001b[0;32m   1565\u001b[0m \u001b[38;5;124;03mThe precision is the ratio ``tp / (tp + fp)`` where ``tp`` is the number of\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1718\u001b[0m \u001b[38;5;124;03m array([2, 2, 2]))\u001b[39;00m\n\u001b[0;32m   1719\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   1720\u001b[0m zero_division_value \u001b[38;5;241m=\u001b[39m _check_zero_division(zero_division)\n\u001b[1;32m-> 1721\u001b[0m labels \u001b[38;5;241m=\u001b[39m _check_set_wise_labels(y_true, y_pred, average, labels, pos_label)\n\u001b[0;32m   1723\u001b[0m \u001b[38;5;66;03m# Calculate tp_sum, pred_sum, true_sum ###\u001b[39;00m\n\u001b[0;32m   1724\u001b[0m samplewise \u001b[38;5;241m=\u001b[39m average \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msamples\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1507\u001b[0m, in \u001b[0;36m_check_set_wise_labels\u001b[1;34m(y_true, y_pred, average, labels, pos_label)\u001b[0m\n\u001b[0;32m   1505\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m pos_label \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m present_labels:\n\u001b[0;32m   1506\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(present_labels) \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m2\u001b[39m:\n\u001b[1;32m-> 1507\u001b[0m             \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1508\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpos_label=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpos_label\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is not a valid label. It \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1509\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mshould be one of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpresent_labels\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1510\u001b[0m             )\n\u001b[0;32m   1511\u001b[0m     labels \u001b[38;5;241m=\u001b[39m [pos_label]\n\u001b[0;32m   1512\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "\u001b[1;31mValueError\u001b[0m: pos_label=1 is not a valid label. It should be one of [7, 8]"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "# Make predictions on test set\n",
    "y_pred = model.predict(X_test) \n",
    "\n",
    "# Calculate metrics\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "recall = recall_score(y_test, y_pred)\n",
    "f1 = f1_score(y_test, y_pred)\n",
    "\n",
    "# Print metrics\n",
    "print(\"Accuracy:\", accuracy)\n",
    "print(\"Precision:\", precision)  \n",
    "print(\"Recall:\", recall)\n",
    "print(\"F1 Score:\", f1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e708e94f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 96.75164723155889\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Make predictions on test set\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Calculate accuracy \n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8815d620",
   "metadata": {},
   "outputs": [],
   "source": [
    "CONFUSION MAERICS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ad898d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "\n",
    "X = df.drop('target', axis=1)\n",
    "y = df['target']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "rf = RandomForestClassifier()\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "y_pred = rf.predict(X_test)\n",
    "\n",
    "confusion = confusion_matrix(y_test, y_pred)\n",
    "print(confusion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "00393db0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f56f9a03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1]\n",
      " [0 0]]\n"
     ]
    }
   ],
   "source": [
    "X = df.drop('target', axis=1)\n",
    "y = df['target']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "rf = RandomForestClassifier()\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "y_pred = rf.predict(X_test)\n",
    "\n",
    "confusion = confusion_matrix(y_test, y_pred)\n",
    "print(confusion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "cd224694",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      "\n",
      " [[5 0]\n",
      " [2 3]]\n",
      "\n",
      "Precision: 1.0\n",
      "\n",
      "Recall: 0.6\n",
      "\n",
      "F1 Score: 0.7499999999999999\n",
      "\n",
      "False Negative rate: 0.4\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score\n",
    "\n",
    "# Example predictions and true labels\n",
    "y_true = [1, 1, 0, 1, 0, 0, 1, 0, 1, 0]  \n",
    "y_pred = [1, 0, 0, 1, 0, 0, 1, 0, 0, 0]\n",
    "\n",
    "# Calculate confusion matrix\n",
    "cnf_matrix = confusion_matrix(y_true, y_pred)\n",
    "\n",
    "# Calculate metrics from confusion matrix\n",
    "tp = cnf_matrix[1,1]\n",
    "fp = cnf_matrix[0,1]\n",
    "fn = cnf_matrix[1,0]\n",
    "tn = cnf_matrix[0,0]\n",
    "\n",
    "precision = tp / (tp + fp)\n",
    "recall = tp / (tp + fn) \n",
    "f1 = 2 * (precision * recall) / (precision + recall)\n",
    "fnr = fn / (fn + tp)\n",
    "\n",
    "# Print metrics\n",
    "print('Confusion Matrix:\\n\\n', cnf_matrix)\n",
    "print('\\nPrecision:', precision)\n",
    "print('\\nRecall:', recall)\n",
    "print('\\nF1 Score:', f1) \n",
    "print('\\nFalse Negative rate:', fnr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ae6affe",
   "metadata": {},
   "outputs": [],
   "source": [
    "CONCLUSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7fd88ca5",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "- Most patients presented with cough and/or fever symptoms, which are common indicators of respiratory illness. Only 1 patient\n",
    "had no symptoms at all.\n",
    "\n",
    "- 5 out of 10 patients reported known contact with other infected individuals. This suggests potential human-to-human\n",
    "transmission of the illness.\n",
    "\n",
    "- Shortness of breath and sore throat were less commonly reported compared to cough and fever. This may indicate the main\n",
    "symptoms to screen for.\n",
    "\n",
    "- Nearly all patients reported headache along with other symptoms. Headache seems to regularly accompany the primary symptoms\n",
    "like cough and fever.\n",
    "\n",
    "- There does not appear to be an obvious correlation between specific symptoms and known contact with infected individuals\n",
    "in this small sample. Larger samples would be needed to draw conclusions. \n",
    "\n",
    "- The symptom profile is consistent with a respiratory viral illness given cough, fever, and shortness of breath are commonly \n",
    "reported. Additional lab testing would be required to confirm the exact etiology.\n",
    "\n",
    "- Patients with a cough, fever, sore throat and known contact with infected individuals may be highest priority for testing\n",
    "and isolation to prevent further transmission.\n",
    "\n",
    "In summary, these data are indicative of a respiratory illness spreading via human contact, with cough, fever, and headache \n",
    "as predominant symptoms. More data and lab testing would be needed to confirm the exact cause and patterns. Let me know if this\n",
    "provides a helpful high-level conclusion based on the information given!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86895c5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "OVERALL METHODS USED IN THIS PROJECT.\n",
    "\n",
    "Method 1:\n",
    "- Uses RandomizedSearchCV to tune hyperparameters of RandomForestClassifier\n",
    "- Evaluates using 5-fold cross validation and accuracy scoring\n",
    "- Prints best hyperparameters and refits model on full dataset \n",
    "\n",
    "Pros:\n",
    "- Implements hyperparameter tuning rather than default hyperparameters\n",
    "- Uses cross validation to evaluate robustly \n",
    "- Refits on full dataset to create best model before final evaluation\n",
    "\n",
    "Cons: \n",
    "- Only evaluates based on accuracy, which has limitations if classes are imbalanced\n",
    "\n",
    "Method 2:\n",
    "- Calculates accuracy, precision, recall and F1 score\n",
    "- Uses classification metrics like precision and recall that account for imbalances\n",
    "\n",
    "Pros:\n",
    "- Evaluates on multiple metrics beyond just accuracy\n",
    "- Calculates precision and recall which reveal insights into types of errors\n",
    "\n",
    "Cons:\n",
    "- Does not clearly implement training/validation split, cross validation, or hyperparameter tuning\n",
    "\n",
    "Method 3:\n",
    "- Generates confusion matrix and derives metrics from it\n",
    "- Calculates precision, recall, F1, and false negative rate\n",
    "\n",
    "Pros: \n",
    "- Confusion matrix gives complete picture of model performance\n",
    "- Computes advanced classification metrics from confusion matrix\n",
    "\n",
    "Cons:\n",
    "- Does not implement model training process\n",
    "\n",
    "Overall, I would recommend Method 1 as the best approach as it utilizes cross validation, hyperparameter tuning, and evaluation\n",
    "on a holdout test set. Method 2 and 3 compute important metrics, but lack the model development process. \n",
    "\n",
    "The ideal approach would be to utilize aspects of all three:\n",
    "- Hyperparameter tuning and cross validation from Method 1  \n",
    "- Evaluation metrics from Method 2 and Method 3\n",
    "- Refitting on full dataset before final test evaluation\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed0c97e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "THESE ARE SOME OF THE BETTER APPORCHES.\n",
    "Method 1 implements hyperparameter tuning through RandomizedSearchCV and evaluates using cross-validation on a metric like \n",
    "accuracy. However, accuracy alone can be misleading if classes are imbalanced.\n",
    "\n",
    "Method 2 calculates additional evaluation metrics like precision, recall and F1 score that provide more insights into model \n",
    "performance, especially for imbalanced classes. However, it does not clearly implement cross-validation or hyperparameter tuninG\n",
    ".\n",
    "\n",
    "Method 3 generates the confusion matrix and derives precision, recall, F1 and false negative rate from it. This gives a very \n",
    "comprehensive view of model performance. But it does not cover the model training process.\n",
    "\n",
    "Given these factors, I would recommend a combination of Method 1 and Method 3:\n",
    "\n",
    "- Use RandomizedSearchCV for hyperparameter tuning with cross-validation as in Method 1\n",
    "- Evaluate on metrics like precision, recall, F1 score, confusion matrix as in Method 3\n",
    "- Refit the best model on the full dataset as in Method 1\n",
    "\n",
    "This combines the benefits of proper model training and tuning from Method 1 with the comprehensive and insightful evaluation\n",
    "metrics from Method 3. \n",
    "\n",
    "The hyperparameter tuning and cross-validation of Method 1 helps prevent overfitting and find the optimal model parameters.\n",
    "\n",
    "The evaluation metrics of Method 3 give a complete view of performance, especially for imbalanced classes where accuracy has\n",
    "limitations.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
